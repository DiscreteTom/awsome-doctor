title: Can't ping EC2 instance from the Internet.
description: ''
data:
  instanceId: ''
  securityGroupIds: []
  vpcId: ''
  subnetId: ''
input:
  - label: Instance ID
    placeholder: i-01234567891234567
    store: instanceId
    type: text
steps:
  - name: Instance status check.
    js: |
      let res = await $.aws.ec2.describeInstanceStatus({
        InstanceIds: [$.data.instanceId],
      });

      let state = res.InstanceStatuses[0].InstanceState.Name;
      if (state != "running") {
        $.panic(`Instance is not running. Instance state: ${state}.`);
      }

      let iStatus = res.InstanceStatuses[0].InstanceStatus.Status;
      if (iStatus != "ok") {
        $.panic(`Instance status check failed. Status: ${iStatus}.`);
      }

      let sStatus = res.InstanceStatuses[0].SystemStatus.Status;
      if (sStatus != "ok") {
        $.panic(`System status check failed. Status: ${sStatus}.`);
      }

      $.done("Instance is running, all status check passed.");
  - name: Retrieve instance info, check public IP.
    js: |
      let res = await $.aws.ec2.describeInstances({
        InstanceIds: [$.data.instanceId],
      });

      let publicIps = $.jp.query(res, "$..PrivateIpAddresses..PublicIp");
      if (publicIps.length === 0) {
        $.panic("No public IP is associated to this instance.");
      }

      $.data.securityGroupIds = $.jp.query(res, "$..SecurityGroups[*].GroupId");
      $.data.vpcId = $.jp.query(res, "$..VpcId")[0];
      $.data.subnetId = $.jp.query(res, "$..SubnetId")[0];

      $.done(`/md
      - Public IP: ${publicIps.join(", ")}
      - Security groups: ${$.data.securityGroupIds.join(", ")}
      - VPC ID: ${$.data.vpcId}
      - Subnet ID: ${$.data.subnetId}
      `);
  - name: Check security group inbound rules.
    js: |
      let window = await $.import(
        "https://unpkg.com/awsome-doctor-utils@0.1.0/dist/bundle.js"
      );
      $.data.utils = window.awsomeUtils;

      let result = await $.data.utils.sg.checkPort({
        ec2: $.aws.ec2,
        jp: $.jp,
        direction: "in",
        securityGroupIds: $.data.securityGroupIds,
        protocol: "icmp",
        port: 8, // echo request
      });

      if (result.anyTrafficPeer.no && result.peer.no) {
        $.err += `No IP is allowed to access this instance using ping, please fix your security group inbound rules. `;
        $.err += `Security group ids: ${$.data.securityGroupIds.join(", ")}`;
        return;
      }

      if (result.anyTrafficPeer.any) {
        $.done("All traffic allowed from 0.0.0.0/0.");
      } else if (result.anyTrafficPeer.cidr.length !== 0) {
        $.info += `All traffic from those CIDRs are allowed: ${result.anyTrafficPeer.cidr.join(
          ", "
        )}. `;
      }

      if (result.peer.any) {
        $.done(`Traffic is allowed from 0.0.0.0/0 using ping.`);
      } else if (result.peer.cidr.length !== 0) {
        $.info += `Traffic is allowed from those CIDRs: ${result.peer.cidr.join(
          ", "
        )}. `;
      }

      if ($.info === "") {
        $.err += `No IP is allowed to access this instance using ping, please fix your security group inbound rules. `;
        $.err += `Security group ids: ${$.data.securityGroupIds.join(", ")}`;
        return;
      }
  - name: Check route table Internet Gateway.
    js: |
      let res = await $.data.utils.vpc.checkSubnetIgw({
        ec2: $.aws.ec2,
        jp: $.jp,
        subnetId: $.data.subnetId,
        vpcId: $.data.vpcId,
      });

      if (res.type == "no") {
        $.panic(`Subnet ${$.data.subnetId} has no route to an Internet Gateway.`);
      }

      if (res.type == "any") {
        $.done(`0.0.0.0/0 will be route to an Internet Gateway`);
      } else if (res.type == "cidr") {
        $.info += `Those CIDR blocks will be route to an Internet Gateway: ${res.cidr.join(
          ", "
        )}. `;
      }
  - name: Check network ACL.
    js: |
      let inbound = await $.data.utils.vpc.checkSubnetNacl({
        ec2: $.aws.ec2,
        jp: $.jp,
        subnetId: $.data.subnetId,
        direction: "in",
        protocol: "icmp",
        port: 8,
      });
      let outbound = await $.data.utils.vpc.checkSubnetNacl({
        ec2: $.aws.ec2,
        jp: $.jp,
        subnetId: $.data.subnetId,
        direction: "out",
        protocol: "icmp",
        port: 0,
      });

      let stringifyRules = (rules) => {
        let result = "";
        rules.map(
          (r) =>
            (result += `- ${r.allow ? "allow" : "deny"} ${r.cidr}, rule number=${
              r.number != 32767 ? r.number : "*"
            }\n`)
        );
        return result;
      };

      if (inbound.any && outbound.any) {
        $.done("All traffic allowed.");
      } else {
        $.info = "/md\n";

        if (inbound.any) {
          $.info += `All inbound traffic allowed.\n`;
        } else {
          $.info += `
      Related inbound rules:
      ${stringifyRules(inbound.rule)}
      \n`;
        }

        if (outbound.any) {
          $.info += `All outbound traffic allowed.\n`;
        } else {
          $.info += `
      Related outbound rules:
      ${stringifyRules(outbound.rule)}
      \n`;
        }
      }
