title: Target group health check failed.
description: ''
data:
  tgName: ''
  lbSgs: []
  lbArn: ''
  lbName: ''
  healthCheckPort: 80
  unhealthyTargets: []
  tgArn: ''
input:
  - label: Target group name
    placeholder: ''
    store: tgName
  - label: Load balancer name
    placeholder: ''
    store: lbName
steps:
  - name: Retrieve load balancer info.
    js: >
      let res = await $.aws.elbv2.describeLoadBalancers({ Names: [$.data.lbName]
      });


      let lb = res.LoadBalancers[0];

      let type = lb.Type;

      $.data.lbSgs = lb.SecurityGroups;

      $.data.lbArn = lb.LoadBalancerArn;


      $.ok = `/md

      - Security groups: \`${$.data.lbSgs.join(", ")}\`.

      - ARN: \`${$.data.lbArn}\`. 

      - Type: \`${type}\`.

      `;
  - name: Retrieve target group info.
    js: >
      let res = await $.aws.elbv2.describeTargetGroups({ Names: [$.data.tgName]
      });

      let tg = res.TargetGroups[0];


      if (!tg.LoadBalancerArns.includes($.data.lbArn)) {
        $.panic(
          `Target group '${$.data.tgName}' is not associated with the load balancer '${$.data.lbName}'.`
        );
      }

      if (!tg.HealthCheckEnabled) {
        $.panic(`Health check is not enabled for target group '${$.data.tgName}'.`);
      }

      if (tg.TargetType !== "instance") {
        $.panic(`Currently the target type ${tg.TargetType} is not supported.`);
      }


      $.data.tgArn = tg.TargetGroupArn;

      $.data.healthCheckPort = tg.HealthCheckPort;


      $.info = `/md

      - Protocol: \`${tg.Protocol}\`
        - Version: \`${tg.ProtocolVersion}\`
      - Load balancer listen port: \`${tg.Port}\`

      - Target type: \`${tg.TargetType}\`

      - Health check
        - Enabled: \`${tg.HealthCheckEnabled}\`
        - Protocol: \`${tg.HealthCheckProtocol}\`
        - Port: \`${$.data.healthCheckPort}\`
        - Path: \`${tg.HealthCheckPath}\`
        - Success codes: \`${tg.Matcher.HttpCode || tg.Matcher.GrpcCode}\`
      - Arn: \`${$.data.tgArn}\`

      `;
  - name: Retrieve unhealthy targets.
    js: |
      let res = await $.aws.elbv2.describeTargetHealth({
        TargetGroupArn: $.data.tgArn,
      });

      if (res.TargetHealthDescriptions.length === 0) {
        $.info = `No targets in the target group '${$.data.tgName}'. `;
        $.stop = true;
        return;
      }

      $.data.unhealthyTargets = $.jp.query(
        res,
        "$.TargetHealthDescriptions[?(@.TargetHealth.State == 'unhealthy')]"
      );

      // not unhealthy and not healthy
      let otherTargets = $.jp.query(
        res,
        "$.TargetHealthDescriptions[?(@.TargetHealth.State != 'unhealthy' && @.TargetHealth.State != 'healthy')]"
      );

      if ($.data.unhealthyTargets.length === 0) {
        if (otherTargets.length === 0) {
          $.done("All targets are healthy.");
        } else {
          $.info += `Those targets are not in 'unhealthy' state and not in 'healthy' state, ignored: `;
          otherTargets
            .map((t) => {
              $.info += `${t.Target.Id} (${t.TargetHealth.State})`;
            })
            .join(", ");
          $.info += `. `;
        }
        $.stop = true;
        return;
      }

      $.info = `/md
      ### Unhealthy Targets
      `;
      $.data.unhealthyTargets.map((t) => {
        $.info += `
      - Instance ID: \`${t.Target.Id}\`
        - Traffic port: \`${t.Target.Port}\`
        - Health check port: \`${t.HealthCheckPort}\`
        - Unhealthy reason: \`${t.TargetHealth.Reason}\`
        - Unhealthy description: ${t.TargetHealth.Description}
        `;
      });
  - name: Check unhealthy targets security groups' inbound rules.
    js: |
      let sgInfo = [];

      for (let i = 0; i < $.data.unhealthyTargets.length; ++i) {
        let t = $.data.unhealthyTargets[i];

        let result = await $.utils.sg.checkEC2Instances({
          $,
          instanceIds: [t.Target.Id],
          direction: "in",
          protocol: "tcp",
          port: t.HealthCheckPort,
        });

        // traffic allowed from any source
        if (result.anyTrafficPeer.any || result.peer.any) {
          // skip this instance
          continue;
        }
        // traffic allowed from lb's security group
        if (
          result.anyTrafficPeer.sg.filter((sg) => $.data.lbSgs.includes(sg))
            .length !== 0 ||
          result.peer.sg.filter((sg) => $.data.lbSgs.includes(sg))
        ) {
          continue;
        }

        if (result.peer.no && result.anyTrafficPeer.no) {
          $.err += `No IP is allowed to access target \`${t.Target.Id}\` at port ${t.HealthCheckPort}, please fix your security group inbound rules. `;
          $.err += `Security group ids: ${result.securityGroupIds.join(", ")}`;
          return;
        }

        // gather cidr info
        if (result.anyTrafficPeer.cidr.length !== 0) {
          sgInfo.push({
            cidr: result.anyTrafficPeer.cidr,
            target: t.Target.Id,
            sg: res.securityGroupIds,
            type: "any-traffic",
          });
        }
        if (result.peer.cidr.length !== 0) {
          sgInfo.push({
            cidr: result.peer.cidr,
            target: t.Target.Id,
            sg: res.securityGroupIds,
            type: "specific-port",
          });
        }
      }

      if (sgInfo.length !== 0) {
        $.info = `/md\n`;
        for (let i = 0; i < sgInfo.length; ++i) {
          if (sgInfo[i].type == "any-traffic") {
            $.info += `- Instance \`${
              sgInfo[i].target
            }\` with security groups \`${sgInfo[i].sg.join(
              ", "
            )}\` allows any traffic from \`${sgInfo[i].cidr.join(", ")}\`\n`;
          } else {
            $.info += `- Instance \`${
              sgInfo[i].target
            }\` with security groups \`${sgInfo[i].sg.join(
              ", "
            )}\` allows health check traffic from \`${sgInfo[i].cidr.join(", ")}\`\n`;
          }
        }
      } else {
        $.ok = `Targets' security groups are correct.`;
      }
  - name: Check load balancer security groups' outbound rules.
    js: |
      // check `all traffic` rules
      let result = await $.utils.sg.checkPort({
        $,
        direction: "out",
        securityGroupIds: $.data.lbSgs,
        protocol: "tcp",
        port: 22, // a random port
      });

      if (result.anyTrafficPeer.any) {
        $.ok = "All traffic to 0.0.0.0/0 are allowed.";
        return;
      } else if (result.anyTrafficPeer.cidr.length !== 0) {
        $.info += `All traffic to those CIDRs are allowed: ${result.anyTrafficPeer.cidr.join(
          ", "
        )}. `;
      }

      // check targets health check ports
      let hcPorts = $.data.unhealthyTargets.map((t) => t.HealthCheckPort);
      let ports = [...new Set(hcPorts)]; // deduplicate

      for (let i = 0; i < ports.length; ++i) {
        let port = ports[i];

        let result = await $.utils.sg.checkPort({
          $,
          direction: "out",
          securityGroupIds: $.data.lbSgs,
          protocol: "tcp",
          port,
        });

        if (result.err) {
          $.err = result.err;
          return;
        }

        if (result.peer.no) {
          $.err += `No IP is allowed outbound from the load balancer using tcp at port ${port}, please fix your security group outbound rules. `;
          $.err += `Security group ids: ${$.data.lbSgs.join(", ")}. `;
          return;
        }

        if (result.peer.cidr.length !== 0) {
          $.info += `Traffic to port ${port} are allowed to those CIDRs: ${result.portPeer.cidr.join(
            ", "
          )}. `;
        }
      }

      $.ok = `Load balancer's security groups are correct.`;
