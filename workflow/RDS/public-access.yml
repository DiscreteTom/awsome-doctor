title: Can't access RDS instance from the Internet.
description: >-
  Exposing databases to the Internet is <span style="color: red;">**NOT**</span>
  recommended.


  The following ways are prefered to connect to your databases:


  - Login to an EC2 instance in the same VPC, and access your databases on that
  EC2 instance.

  - Setup an SSH tunnel(SSH port forwarding) to connect to your databases
  through an EC2 instance.
data:
  dbIdentifier: ''
  securityGroupIds: []
  subnets: []
  vpc: ''
  port: 3306
input:
  - label: DB Identifier
    placeholder: ''
    store: dbIdentifier
    type: text
steps:
  - name: Retrieve database instance info & public accessibility.
    js: |
      let res = await $.aws.rds.describeDBInstances({
        DBInstanceIdentifier: $.data.dbIdentifier,
      });

      let username = $.jp.query(res, "$..MasterUsername")[0];
      let publiclyAccessible = $.jp.query(res, "$..PubliclyAccessible")[0];
      $.data.port = $.jp.query(res, "$..Port")[0];
      $.data.securityGroupIds = $.jp.query(
        res,
        "$..VpcSecurityGroups[?(@.Status=='active')].VpcSecurityGroupId"
      );
      $.data.subnets = $.jp.query(
        res,
        "$..Subnets[?(@.SubnetStatus=='Active')].SubnetIdentifier"
      );
      $.data.vpc = $.jp.query(res, "$..VpcId")[0];

      if (!publiclyAccessible) {
        $.panic(
          `Database is not public accessible. Please modify your database to enable "Public access".`
        );
      }

      $.done(`/md
      - Database username: ${username}
      - Port: ${$.data.port}
      - Active security groups: ${$.data.securityGroupIds.join(", ")}
      - Active subnets: ${$.data.subnets.join(", ")}
      - VPC: ${$.data.vpc}
      `);
  - name: Check subnets' route table Internet Gateway.
    js: |
      let window = await $.import(
        "https://unpkg.com/awsome-doctor-utils@0.1.0/dist/bundle.js"
      );
      $.data.utils = window.awsomeUtils;

      let result = {};

      $.data.subnets.map((subnet) => {
        let res = await $.data.utils.vpc.checkSubnetIgw({
          ec2: $.aws.ec2,
          jp: $.jp,
          subnetId: subnet,
          vpcId: $.data.vpc,
        });

        if (res.type == "no") {
          $.panic(`Subnet ${subnet} is not public.`);
        }

        if (res.type == "cidr") {
          result[subnet] = res.cidr;
        }
      });

      for (let subnet in result) {
        $.info += `For subnet ${subnet}, those CIDR blocks will be route to an Internet Gateway: ${result[
          subnet
        ].join(", ")}. `;
      }

      if ($.info === "") $.ok = `All subnets are public.`;
  - name: Check security groups' inbound rules.
    js: |
      let result = await $.data.utils.sg.checkPort({
        ec2: $.aws.ec2,
        jp: $.jp,
        direction: "in",
        securityGroupIds: $.data.securityGroupIds,
        protocol: "tcp",
        port: $.data.port,
      });

      if (result.peer.no && result.anyTrafficPeer.no) {
        $.err += `No IP is allowed to access this database at port ${$.data.port}, please fix your security group inbound rules. `;
        $.err += `Security group ids: ${$.data.securityGroupIds.join(", ")}`;
        return;
      }

      if (result.anyTrafficPeer.any) {
        $.done("All traffic from 0.0.0.0/0 are allowed.");
      } else if (result.anyTrafficPeer.cidr.length !== 0) {
        $.info += `All traffic from those CIDRs are allowed: ${result.anyTrafficPeer.cidr.join(
          ", "
        )}. `;
      }

      if (result.peer.any) {
        $.done("Traffic is allowed from 0.0.0.0/0.");
      } else if (result.peer.cidr.length !== 0) {
        $.info += `Traffic is allowed from those CIDRs: ${result.portPeer.cidr.join(
          ", "
        )}. `;
      }

      if ($.info === "") {
        $.err += `No IP is allowed to access this database at port ${$.data.port}, please fix your security group inbound rules. `;
        $.err += `Security group ids: ${$.data.securityGroupIds.join(", ")}`;
        return;
      }
  - name: Check network ACL.
    js: |
      let result = {};

      let stringifyRules = (rules) => {
        let ret = "";
        rules.map(
          (r) =>
            (ret += `- ${r.allow ? "allow" : "deny"} ${r.cidr}, rule number=${
              r.number != 32767 ? r.number : "*"
            }\n`)
        );
        return ret;
      };

      $.data.subnets.map((subnet) => {
        let inbound = await $.data.utils.vpc.checkSubnetNacl({
          ec2: $.aws.ec2,
          jp: $.jp,
          subnetId: subnet,
          direction: "in",
          protocol: "tcp",
          port: $.data.port,
        });
        let outbound = await $.data.utils.vpc.checkSubnetNacl({
          ec2: $.aws.ec2,
          jp: $.jp,
          subnetId: $.data.subnetId,
          direction: "out",
          protocol: "tcp",
          port: $.data.port,
        });

        if (inbound.any && outbound.any) {
          return;
        } else {
          result[subnet] = {};

          if (!inbound.any) {
            result[subnet].in = inbound.rule;
          }

          if (!outbound.any) {
            result[subnet].out = outbound.rule;
          }
        }
      });

      if (Object.keys(result).length === 0) {
        $.done("All traffic allowed.");
      } else {
        $.info = `/md\n`;
        for (let subnet in result) {
          $.info += `### Subnet ${subnet}\n\n`;
          if (result[subnet].in) {
            $.info += "Related inbound rules:\n\n";
            $.info += stringifyRules(result[subnet].in);
            $.info += "\n\n";
          }
          if (result[subnet].out) {
            $.info += "Related outbound rules:\n\n";
            $.info += stringifyRules(result[subnet].out);
            $.info += "\n\n";
          }
        }
      }
