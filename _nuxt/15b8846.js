(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{199:function(o,e,r){"use strict";r.r(e);r(22);var t={props:{timeout:Number,color:String,width:Number,reverse:Boolean,rotate:Number},data:function(){return{startTime:0,value:0}},mounted:function(){this.startTime=Date.now(),this.update()},methods:{update:function(){var progress=(Date.now()-this.startTime)/this.timeout*100;this.value=this.reverse?progress:100-progress,progress<=100&&window.requestAnimationFrame(this.update)}}},n=(r(367),r(63)),l=r(68),c=r.n(l),d=r(194),component=Object(n.a)(t,(function(){var o=this,e=o.$createElement;return(o._self._c||e)("v-progress-circular",{staticClass:"timeout-progress",attrs:{color:o.color,width:o.width,value:o.value,rotate:o.rotate}},[o._t("default")],2)}),[],!1,null,null,null);e.default=component.exports;c()(component,{VProgressCircular:d.a})},204:function(o,e,r){"use strict";var t=new(r(1).a);e.a=function(o,e){e("bus",t)}},205:function(o,e,r){"use strict";var t=r(1),n=r(289),l=r.n(n);t.a.use(l.a)},206:function(o,e,r){"use strict";var t=r(169),n=r(170),l=r.n(n),c=(r(427),r(428),r(282),r(429),r(430),r(431),r(432),r(433),r(434),new t.marked.Renderer);t.marked.setOptions({renderer:c,highlight:function(code,o){return l.a.languages[o]?l.a.highlight(code,l.a.languages[o],o):code}}),e.a=function(o,e){e("md",t.marked)}},258:function(o,e,r){var content=r(333);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[o.i,content,""]]),content.locals&&(o.exports=content.locals);(0,r(19).default)("dc093880",content,!0,{sourceMap:!1})},267:function(o,e,r){var content=r(368);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[o.i,content,""]]),content.locals&&(o.exports=content.locals);(0,r(19).default)("989fc864",content,!0,{sourceMap:!1})},292:function(o,e,r){"use strict";var t=r(30),n=(r(88),r(291)),l=r(199),c=r(287),d={components:{"v-snackbars":n.a,TimeoutProgress:l.default},data:function(){return{leftDrawer:!0,messages:[],msgTimeout:5e3}},methods:{getUrl:function(){return window.location.href}},computed:{coreVersion:function(){return c.version}},mounted:function(){var o=this;return Object(t.a)(regeneratorRuntime.mark((function e(){var r,t,n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o.$bus.$on("append-msg",(function(e){return o.messages.push(e)})),"undefined"!=typeof Storage&&(r=localStorage.getItem("tempAk"),t=localStorage.getItem("tempSk"),r&&t&&o.$store.commit("updateConfig",{persistCredentials:!0,tempAk:r,tempSk:t})),o.$store.commit("updateConfig",{loadingCredentials:!1}),e.next=5,window.$workbox;case 5:(n=e.sent)&&n.addEventListener("installed",(function(e){e.isUpdate&&o.$bus.$emit("append-msg","New content available. Please refresh this page.")}));case 7:case"end":return e.stop()}}),e)})))()}},f=r(63),m=r(68),y=r.n(m),h=r(448),$=r(454),w=r(449),k=r(221),v=r(455),x=r(438),I=r(450),S=r(176),j=r(196),C=r(127),P=r(197),R=r(89),T=r(451),A=r(456),V=r(452),z=r(224),D=r(453),component=Object(f.a)(d,(function(){var o=this,e=o.$createElement,r=o._self._c||e;return r("v-app",{attrs:{dark:""}},[r("v-navigation-drawer",{attrs:{clipped:"",fixed:"",app:""},model:{value:o.leftDrawer,callback:function(e){o.leftDrawer=e},expression:"leftDrawer"}},[r("v-list-item",[r("v-list-item-content",[r("v-list-item-title",{staticClass:"text-h6"},[o._v(" Services ")])],1)],1),o._v(" "),r("v-divider"),o._v(" "),r("v-list",o._l(o.$store.state.workflows,(function(e,t){return r("v-list-item",{key:t,attrs:{exact:"",to:"/workflow/"+t+"/"}},[r("v-list-item-action",[r("v-icon",[o._v(" mdi-cloud-outline ")])],1),o._v(" "),r("v-list-item-content",[o._v(o._s(t))])],1)})),1)],1),o._v(" "),r("v-app-bar",{attrs:{"clipped-left":"",fixed:"",app:"",dense:""}},[r("v-app-bar-nav-icon",{on:{click:function(e){e.stopPropagation(),o.leftDrawer=!o.leftDrawer}}}),o._v(" "),r("v-toolbar-title",{staticClass:"d-flex"},[o._v(" Awsome Doctor 👩‍⚕️ 👨‍⚕️ ")]),o._v(" "),r("v-spacer"),o._v(" "),r("v-tooltip",{attrs:{bottom:""},scopedSlots:o._u([{key:"activator",fn:function(e){var t=e.on;return[r("v-btn",o._g({attrs:{icon:"",to:"/"}},t),[r("v-icon",[o._v(" mdi-home-outline ")])],1)]}}])},[o._v(" "),r("span",[o._v("Home")])]),o._v(" "),r("v-tooltip",{attrs:{bottom:""},scopedSlots:o._u([{key:"activator",fn:function(e){var t=e.on;return[r("v-btn",o._g({attrs:{icon:"",href:"https://github.com/DiscreteTom/awsome-doctor"}},t),[r("v-icon",[o._v(" mdi-github ")])],1)]}}])},[o._v(" "),r("span",[o._v("View Source Code")])]),o._v(" "),r("v-tooltip",{attrs:{bottom:""},scopedSlots:o._u([{key:"activator",fn:function(e){var t=e.on;return[r("v-btn",o._g({attrs:{icon:"",to:"/editor"}},t),[r("v-icon",[o._v(" mdi-circle-edit-outline ")])],1)]}}])},[o._v(" "),r("span",[o._v("Editor")])]),o._v(" "),r("v-tooltip",{attrs:{bottom:""},scopedSlots:o._u([{key:"activator",fn:function(e){var t=e.on;return[r("v-btn",o._g({attrs:{icon:"",href:"https://github.com/DiscreteTom/awsome-doctor-core/"}},t),[r("v-icon",[o._v(" mdi-information-outline ")])],1)]}}])},[o._v(" "),r("span",[o._v(" Core Version: "+o._s(o.coreVersion)+" ")])]),o._v(" "),r("v-tooltip",{attrs:{bottom:""},scopedSlots:o._u([{key:"activator",fn:function(e){var t=e.on;return[r("v-btn",o._g({attrs:{icon:""},on:{click:function(e){o.$copyText(o.getUrl()).then((function(){return o.$bus.$emit("append-msg","Copied")}))}}},t),[r("v-icon",[o._v(" mdi-share-variant ")])],1)]}}])},[o._v(" "),r("span",[o._v("Copy Link")])])],1),o._v(" "),r("v-main",[r("v-container",[r("Nuxt")],1)],1),o._v(" "),r("v-footer",{attrs:{inset:"",absolute:"",app:""}},[r("span",[o._v("© "+o._s((new Date).getFullYear()))])]),o._v(" "),r("v-snackbars",{attrs:{messages:o.messages,timeout:o.msgTimeout,bottom:"",right:"",app:""},on:{"update:messages":function(e){o.messages=e}},scopedSlots:o._u([{key:"action",fn:function(e){var t=e.close;return[r("timeout-progress",{attrs:{color:"white",width:2,timeout:o.msgTimeout,rotate:-90}},[r("v-btn",{attrs:{icon:""},on:{click:function(o){return t()}}},[r("v-icon",[o._v(" mdi-close ")])],1)],1)]}}])})],1)}),[],!1,null,null,null);e.a=component.exports;y()(component,{TimeoutProgress:r(199).default}),y()(component,{VApp:h.a,VAppBar:$.a,VAppBarNavIcon:w.a,VBtn:k.a,VContainer:v.a,VDivider:x.a,VFooter:I.a,VIcon:S.a,VList:j.a,VListItem:C.a,VListItemAction:P.a,VListItemContent:R.a,VListItemTitle:R.b,VMain:T.a,VNavigationDrawer:A.a,VSpacer:V.a,VToolbarTitle:z.a,VTooltip:D.a})},306:function(o,e,r){r(307),o.exports=r(308)},332:function(o,e,r){"use strict";r(258)},333:function(o,e,r){var t=r(18)(!1);t.push([o.i,"h1[data-v-35e10596]{font-size:20px}",""]),o.exports=t},338:function(o,e,r){var content=r(339);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[o.i,content,""]]),content.locals&&(o.exports=content.locals);(0,r(19).default)("61758ed0",content,!0,{sourceMap:!1})},339:function(o,e,r){var t=r(18)(!1);t.push([o.i,'.markdown-body .octicon{display:inline-block;fill:currentColor;vertical-align:text-bottom}.markdown-body .anchor{float:left;line-height:1;margin-left:-20px;padding-right:4px}.markdown-body .anchor:focus{outline:0}.markdown-body h1 .octicon-link,.markdown-body h2 .octicon-link,.markdown-body h3 .octicon-link,.markdown-body h4 .octicon-link,.markdown-body h5 .octicon-link,.markdown-body h6 .octicon-link{color:#1b1f23;vertical-align:middle;visibility:hidden}.markdown-body a,.markdown-body h1:hover .anchor,.markdown-body h2:hover .anchor,.markdown-body h3:hover .anchor,.markdown-body h4:hover .anchor,.markdown-body h5:hover .anchor,.markdown-body h6:hover .anchor{text-decoration:none}.markdown-body h1:hover .anchor .octicon-link,.markdown-body h2:hover .anchor .octicon-link,.markdown-body h3:hover .anchor .octicon-link,.markdown-body h4:hover .anchor .octicon-link,.markdown-body h5:hover .anchor .octicon-link,.markdown-body h6:hover .anchor .octicon-link{visibility:visible}.markdown-body h1:hover .anchor .octicon-link:before,.markdown-body h2:hover .anchor .octicon-link:before,.markdown-body h3:hover .anchor .octicon-link:before,.markdown-body h4:hover .anchor .octicon-link:before,.markdown-body h5:hover .anchor .octicon-link:before,.markdown-body h6:hover .anchor .octicon-link:before{width:16px;height:16px;content:" ";display:inline-block;background-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' width=\'16\' height=\'16\' aria-hidden=\'true\'%3E%3Cpath fill-rule=\'evenodd\' d=\'M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\'/%3E%3C/svg%3E")}.markdown-body{-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%;color:var(--color-text-primary);font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji;font-size:16px;line-height:1.5;word-wrap:break-word}.markdown-body details{display:block}.markdown-body summary{display:list-item}.markdown-body a{background-color:transparent;background-color:initial;color:var(--color-text-link)}.markdown-body a:active,.markdown-body a:hover{outline-width:0}.markdown-body strong{font-weight:600}.markdown-body h1{margin:.67em 0}.markdown-body img{border-style:none;max-width:100%;background-color:var(--color-bg-primary)}.markdown-body hr,.markdown-body img{box-sizing:content-box;box-sizing:initial}.markdown-body hr{overflow:hidden;background:0 0;height:.25em;padding:0;margin:24px 0;background-color:var(--color-border-primary);border:0;background:#383838!important}.markdown-body input{font:inherit;margin:0;overflow:visible;font-family:inherit;font-size:inherit;line-height:inherit}.markdown-body [type=checkbox]{box-sizing:border-box;padding:0}.markdown-body :root{--color-scale-black:#1b1f23;--color-scale-white:#fff;--color-scale-gray-0:#fafbfc;--color-scale-gray-1:#f6f8fa;--color-scale-gray-2:#e1e4e8;--color-scale-gray-3:#d1d5da;--color-scale-gray-4:#959da5;--color-scale-gray-5:#6a737d;--color-scale-gray-6:#586069;--color-scale-gray-7:#444d56;--color-scale-gray-8:#2f363d;--color-scale-gray-9:#24292e;--color-scale-blue-0:#f1f8ff;--color-scale-blue-1:#dbedff;--color-scale-blue-2:#c8e1ff;--color-scale-blue-3:#79b8ff;--color-scale-blue-4:#2188ff;--color-scale-blue-5:#0366d6;--color-scale-blue-6:#005cc5;--color-scale-blue-7:#044289;--color-scale-blue-8:#032f62;--color-scale-blue-9:#05264c;--color-scale-green-0:#f0fff4;--color-scale-green-1:#dcffe4;--color-scale-green-2:#bef5cb;--color-scale-green-3:#85e89d;--color-scale-green-4:#34d058;--color-scale-green-5:#28a745;--color-scale-green-6:#22863a;--color-scale-green-7:#176f2c;--color-scale-green-8:#165c26;--color-scale-green-9:#144620;--color-scale-yellow-0:#fffdef;--color-scale-yellow-1:#fffbdd;--color-scale-yellow-2:#fff5b1;--color-scale-yellow-3:#ffea7f;--color-scale-yellow-4:#ffdf5d;--color-scale-yellow-5:#ffd33d;--color-scale-yellow-6:#f9c513;--color-scale-yellow-7:#dbab09;--color-scale-yellow-8:#b08800;--color-scale-yellow-9:#735c0f;--color-scale-orange-0:#fff8f2;--color-scale-orange-1:#ffebda;--color-scale-orange-2:#ffd1ac;--color-scale-orange-3:#ffab70;--color-scale-orange-4:#fb8532;--color-scale-orange-5:#f66a0a;--color-scale-orange-6:#e36209;--color-scale-orange-7:#d15704;--color-scale-orange-8:#c24e00;--color-scale-orange-9:#a04100;--color-scale-red-0:#ffeef0;--color-scale-red-1:#ffdce0;--color-scale-red-2:#fdaeb7;--color-scale-red-3:#f97583;--color-scale-red-4:#ea4a5a;--color-scale-red-5:#d73a49;--color-scale-red-6:#cb2431;--color-scale-red-7:#b31d28;--color-scale-red-8:#9e1c23;--color-scale-red-9:#86181d;--color-scale-purple-0:#f5f0ff;--color-scale-purple-1:#e6dcfd;--color-scale-purple-2:#d1bcf9;--color-scale-purple-3:#b392f0;--color-scale-purple-4:#8a63d2;--color-scale-purple-5:#6f42c1;--color-scale-purple-6:#5a32a3;--color-scale-purple-7:#4c2889;--color-scale-purple-8:#3a1d6e;--color-scale-purple-9:#29134e;--color-scale-pink-0:#ffeef8;--color-scale-pink-1:#fedbf0;--color-scale-pink-2:#f9b3dd;--color-scale-pink-3:#f692ce;--color-scale-pink-4:#ec6cb9;--color-scale-pink-5:#ea4aaa;--color-scale-pink-6:#d03592;--color-scale-pink-7:#b93a86;--color-scale-pink-8:#99306f;--color-scale-pink-9:#6d224f;--color-auto-black:#1b1f23;--color-auto-white:#fff;--color-auto-gray-0:#fafbfc;--color-auto-gray-1:#f6f8fa;--color-auto-gray-2:#e1e4e8;--color-auto-gray-3:#d1d5da;--color-auto-gray-4:#959da5;--color-auto-gray-5:#6a737d;--color-auto-gray-6:#586069;--color-auto-gray-7:#444d56;--color-auto-gray-8:#2f363d;--color-auto-gray-9:#24292e;--color-auto-blue-0:#f1f8ff;--color-auto-blue-1:#dbedff;--color-auto-blue-2:#c8e1ff;--color-auto-blue-3:#79b8ff;--color-auto-blue-4:#2188ff;--color-auto-blue-5:#0366d6;--color-auto-blue-6:#005cc5;--color-auto-blue-7:#044289;--color-auto-blue-8:#032f62;--color-auto-blue-9:#05264c;--color-auto-green-0:#f0fff4;--color-auto-green-1:#dcffe4;--color-auto-green-2:#bef5cb;--color-auto-green-3:#85e89d;--color-auto-green-4:#34d058;--color-auto-green-5:#28a745;--color-auto-green-6:#22863a;--color-auto-green-7:#176f2c;--color-auto-green-8:#165c26;--color-auto-green-9:#144620;--color-auto-yellow-0:#fffdef;--color-auto-yellow-1:#fffbdd;--color-auto-yellow-2:#fff5b1;--color-auto-yellow-3:#ffea7f;--color-auto-yellow-4:#ffdf5d;--color-auto-yellow-5:#ffd33d;--color-auto-yellow-6:#f9c513;--color-auto-yellow-7:#dbab09;--color-auto-yellow-8:#b08800;--color-auto-yellow-9:#735c0f;--color-auto-orange-0:#fff8f2;--color-auto-orange-1:#ffebda;--color-auto-orange-2:#ffd1ac;--color-auto-orange-3:#ffab70;--color-auto-orange-4:#fb8532;--color-auto-orange-5:#f66a0a;--color-auto-orange-6:#e36209;--color-auto-orange-7:#d15704;--color-auto-orange-8:#c24e00;--color-auto-orange-9:#a04100;--color-auto-red-0:#ffeef0;--color-auto-red-1:#ffdce0;--color-auto-red-2:#fdaeb7;--color-auto-red-3:#f97583;--color-auto-red-4:#ea4a5a;--color-auto-red-5:#d73a49;--color-auto-red-6:#cb2431;--color-auto-red-7:#b31d28;--color-auto-red-8:#9e1c23;--color-auto-red-9:#86181d;--color-auto-purple-0:#f5f0ff;--color-auto-purple-1:#e6dcfd;--color-auto-purple-2:#d1bcf9;--color-auto-purple-3:#b392f0;--color-auto-purple-4:#8a63d2;--color-auto-purple-5:#6f42c1;--color-auto-purple-6:#5a32a3;--color-auto-purple-7:#4c2889;--color-auto-purple-8:#3a1d6e;--color-auto-purple-9:#29134e;--color-auto-pink-0:#ffeef8;--color-auto-pink-1:#fedbf0;--color-auto-pink-2:#f9b3dd;--color-auto-pink-3:#f692ce;--color-auto-pink-4:#ec6cb9;--color-auto-pink-5:#ea4aaa;--color-auto-pink-6:#d03592;--color-auto-pink-7:#b93a86;--color-auto-pink-8:#99306f;--color-auto-pink-9:#6d224f;--color-text-primary:#24292e;--color-text-secondary:#586069;--color-text-tertiary:#6a737d;--color-text-placeholder:#6a737d;--color-text-disabled:#6a737d;--color-text-inverse:#fff;--color-text-link:#0366d6;--color-text-danger:#cb2431;--color-text-success:#22863a;--color-text-warning:#b08800;--color-text-white:#fff;--color-icon-primary:#24292e;--color-icon-secondary:#586069;--color-icon-tertiary:#959da5;--color-icon-info:#0366d6;--color-icon-danger:#d73a49;--color-icon-success:#22863a;--color-icon-warning:#b08800;--color-border-primary:#e1e4e8;--color-border-secondary:#eaecef;--color-border-tertiary:#d1d5da;--color-border-overlay:#e1e4e8;--color-border-inverse:#fff;--color-border-info:#0366d6;--color-border-danger:#d73a49;--color-border-success:#34d058;--color-border-warning:#f9c513;--color-bg-canvas:#fff;--color-bg-canvas-mobile:#fff;--color-bg-canvas-inverse:#24292e;--color-bg-canvas-inset:#f6f8fa;--color-bg-primary:#fff;--color-bg-secondary:#fafbfc;--color-bg-tertiary:#f6f8fa;--color-bg-overlay:#fff;--color-bg-backdrop:rgba(27,31,35,0.5);--color-bg-info:#f1f8ff;--color-bg-info-inverse:#0366d6;--color-bg-danger:#ffeef0;--color-bg-danger-inverse:#d73a49;--color-bg-success:#dcffe4;--color-bg-success-inverse:#28a745;--color-bg-warning:#fff5b1;--color-bg-warning-inverse:#ffd33d;--color-shadow-small:0 1px 0 rgba(27,31,35,0.04);--color-shadow-medium:0 3px 6px rgba(149,157,165,0.15);--color-shadow-large:0 8px 24px rgba(149,157,165,0.2);--color-shadow-extra-large:0 12px 48px rgba(149,157,165,0.3);--color-shadow-highlight:inset 0 1px 0 hsla(0,0%,100%,0.25);--color-shadow-inset:inset 0 1px 0 rgba(225,228,232,0.2);--color-state-hover-primary-bg:#0366d6;--color-state-hover-primary-border:#0366d6;--color-state-hover-primary-text:#fff;--color-state-hover-primary-icon:#fff;--color-state-hover-secondary-bg:#f6f8fa;--color-state-hover-secondary-border:#f6f8fa;--color-state-selected-primary-bg:#0366d6;--color-state-selected-primary-border:#0366d6;--color-state-selected-primary-text:#fff;--color-state-selected-primary-icon:#fff;--color-state-focus-border:#0366d6;--color-state-focus-shadow:0 0 0 3px rgba(3,102,214,0.3);--color-fade-fg-10:rgba(27,31,35,0.1);--color-fade-fg-15:rgba(27,31,35,0.15);--color-fade-fg-30:rgba(27,31,35,0.3);--color-fade-fg-50:rgba(27,31,35,0.5);--color-fade-fg-70:rgba(27,31,35,0.7);--color-fade-fg-85:rgba(27,31,35,0.85);--color-fade-black-10:rgba(27,31,35,0.1);--color-fade-black-15:rgba(27,31,35,0.15);--color-fade-black-30:rgba(27,31,35,0.3);--color-fade-black-50:rgba(27,31,35,0.5);--color-fade-black-70:rgba(27,31,35,0.7);--color-fade-black-85:rgba(27,31,35,0.85);--color-fade-white-10:hsla(0,0%,100%,0.1);--color-fade-white-15:hsla(0,0%,100%,0.15);--color-fade-white-30:hsla(0,0%,100%,0.3);--color-fade-white-50:hsla(0,0%,100%,0.5);--color-fade-white-70:hsla(0,0%,100%,0.7);--color-fade-white-85:hsla(0,0%,100%,0.85);--color-alert-info-text:#24292e;--color-alert-info-icon:rgba(4,66,137,0.6);--color-alert-info-bg:#dbedff;--color-alert-info-border:rgba(4,66,137,0.2);--color-alert-warn-text:#24292e;--color-alert-warn-icon:#b08800;--color-alert-warn-bg:#fffbdd;--color-alert-warn-border:rgba(176,136,0,0.2);--color-alert-error-text:#24292e;--color-alert-error-icon:rgba(158,28,35,0.6);--color-alert-error-bg:#ffe3e6;--color-alert-error-border:rgba(158,28,35,0.2);--color-alert-success-text:#24292e;--color-alert-success-icon:rgba(23,111,44,0.8);--color-alert-success-bg:#dcffe4;--color-alert-success-border:rgba(23,111,44,0.2);--color-autocomplete-shadow:0 3px 6px rgba(149,157,165,0.15);--color-autocomplete-row-border:#eaecef;--color-blankslate-icon:#a3aab1;--color-btn-text:#24292e;--color-btn-bg:#fafbfc;--color-btn-border:rgba(27,31,35,0.15);--color-btn-shadow:0 1px 0 rgba(27,31,35,0.04);--color-btn-inset-shadow:inset 0 1px 0 hsla(0,0%,100%,0.25);--color-btn-hover-bg:#f3f4f6;--color-btn-hover-border:rgba(27,31,35,0.15);--color-btn-selected-bg:#edeff2;--color-btn-focus-bg:#fafbfc;--color-btn-focus-border:rgba(27,31,35,0.15);--color-btn-focus-shadow:0 0 0 3px rgba(3,102,214,0.3);--color-btn-shadow-active:inset 0 0.15em 0.3em rgba(27,31,35,0.15);--color-btn-shadow-input-focus:0 0 0 0.2em rgba(3,102,214,0.3);--color-btn-primary-text:#fff;--color-btn-primary-bg:#2ea44f;--color-btn-primary-border:rgba(27,31,35,0.15);--color-btn-primary-shadow:0 1px 0 rgba(27,31,35,0.1);--color-btn-primary-inset-shadow:inset 0 1px 0 hsla(0,0%,100%,0.03);--color-btn-primary-hover-bg:#2c974b;--color-btn-primary-hover-border:rgba(27,31,35,0.15);--color-btn-primary-selected-bg:#2a8f47;--color-btn-primary-selected-shadow:inset 0 1px 0 rgba(20,70,32,0.2);--color-btn-primary-disabled-text:hsla(0,0%,100%,0.8);--color-btn-primary-disabled-bg:#94d3a2;--color-btn-primary-disabled-border:rgba(27,31,35,0.1);--color-btn-primary-focus-bg:#2ea44f;--color-btn-primary-focus-border:rgba(27,31,35,0.15);--color-btn-primary-focus-shadow:0 0 0 3px rgba(46,164,79,0.4);--color-btn-primary-icon:hsla(0,0%,100%,0.8);--color-btn-primary-counter-bg:hsla(0,0%,100%,0.2);--color-btn-outline-text:#0366d6;--color-btn-outline-hover-text:#fff;--color-btn-outline-hover-bg:#0366d6;--color-btn-outline-hover-border:rgba(27,31,35,0.15);--color-btn-outline-hover-shadow:0 1px 0 rgba(27,31,35,0.1);--color-btn-outline-hover-inset-shadow:inset 0 1px 0 hsla(0,0%,100%,0.03);--color-btn-outline-hover-counter-bg:hsla(0,0%,100%,0.2);--color-btn-outline-selected-text:#fff;--color-btn-outline-selected-bg:#035fc7;--color-btn-outline-selected-border:rgba(27,31,35,0.15);--color-btn-outline-selected-shadow:inset 0 1px 0 rgba(5,38,76,0.2);--color-btn-outline-disabled-text:rgba(3,102,214,0.5);--color-btn-outline-disabled-bg:#fafbfc;--color-btn-outline-disabled-counter-bg:rgba(3,102,214,0.05);--color-btn-outline-focus-border:rgba(27,31,35,0.15);--color-btn-outline-focus-shadow:0 0 0 3px rgba(0,92,197,0.4);--color-btn-outline-counter-bg:rgba(3,102,214,0.1);--color-btn-danger-text:#d73a49;--color-btn-danger-hover-text:#fff;--color-btn-danger-hover-bg:#cb2431;--color-btn-danger-hover-border:rgba(27,31,35,0.15);--color-btn-danger-hover-shadow:0 1px 0 rgba(27,31,35,0.1);--color-btn-danger-hover-inset-shadow:inset 0 1px 0 hsla(0,0%,100%,0.03);--color-btn-danger-hover-counter-bg:hsla(0,0%,100%,0.2);--color-btn-danger-selected-text:#fff;--color-btn-danger-selected-bg:#d42d3d;--color-btn-danger-selected-border:rgba(27,31,35,0.15);--color-btn-danger-selected-shadow:inset 0 1px 0 rgba(134,24,29,0.2);--color-btn-danger-disabled-text:rgba(215,58,73,0.5);--color-btn-danger-disabled-bg:#fafbfc;--color-btn-danger-disabled-counter-bg:rgba(215,58,73,0.05);--color-btn-danger-focus-border:rgba(27,31,35,0.15);--color-btn-danger-focus-shadow:0 0 0 3px rgba(203,36,49,0.4);--color-btn-danger-counter-bg:rgba(215,58,73,0.1);--color-btn-counter-bg:rgba(27,31,35,0.08);--color-counter-text:#24292e;--color-counter-bg:rgba(209,213,218,0.5);--color-counter-primary-text:#fff;--color-counter-primary-bg:#6a737d;--color-counter-secondary-text:#6a737d;--color-dropdown-shadow:0 8px 24px rgba(149,157,165,0.2);--color-label-border:#e1e4e8;--color-label-primary-text:#24292e;--color-label-primary-border:#6a737d;--color-label-secondary-text:#586069;--color-label-secondary-border:#e1e4e8;--color-label-info-text:#0366d6;--color-label-info-border:#0366d6;--color-label-success-text:#22863a;--color-label-success-border:#28a745;--color-label-warning-text:#735c0f;--color-label-warning-border:#b08800;--color-label-danger-text:#d73a49;--color-label-danger-border:#cb2431;--color-label-orange-text:#c24e00;--color-label-orange-border:#f66a0a;--color-input-bg:#fff;--color-input-contrast-bg:#fafbfc;--color-input-border:#e1e4e8;--color-input-shadow:inset 0 1px 2px rgba(27,31,35,0.075);--color-input-disabled-bg:#fff;--color-input-disabled-border:#e1e4e8;--color-input-warning-border:#f9c513;--color-input-error-border:#cb2431;--color-input-tooltip-success-text:#144620;--color-input-tooltip-success-bg:#dcffe4;--color-input-tooltip-success-border:#34d058;--color-input-tooltip-warning-text:#735c0f;--color-input-tooltip-warning-bg:#fff5b1;--color-input-tooltip-warning-border:#f9c513;--color-input-tooltip-error-text:#86181d;--color-input-tooltip-error-bg:#ffeef0;--color-input-tooltip-error-border:#f97583;--color-avatar-bg:#fff;--color-avatar-border:transparent;--color-avatar-stack-fade:#d1d5da;--color-avatar-stack-fade-more:#e1e4e8;--color-avatar-child-shadow:-2px -2px 0 hsla(0,0%,100%,0.8);--color-toast-text:#24292e;--color-toast-bg:#fff;--color-toast-border:#e1e4e8;--color-toast-shadow:0 8px 24px rgba(149,157,165,0.2);--color-toast-icon:#fff;--color-toast-icon-bg:#0366d6;--color-toast-icon-border:transparent;--color-toast-success-text:#24292e;--color-toast-success-border:#e1e4e8;--color-toast-success-icon:#fff;--color-toast-success-icon-bg:#28a745;--color-toast-success-icon-border:transparent;--color-toast-warning-text:#24292e;--color-toast-warning-border:#e1e4e8;--color-toast-warning-icon:#24292e;--color-toast-warning-icon-bg:#ffd33d;--color-toast-warning-icon-border:transparent;--color-toast-danger-text:#24292e;--color-toast-danger-border:#e1e4e8;--color-toast-danger-icon:#fff;--color-toast-danger-icon-bg:#d73a49;--color-toast-danger-icon-border:transparent;--color-toast-loading-text:#24292e;--color-toast-loading-border:#e1e4e8;--color-toast-loading-icon:#fff;--color-toast-loading-icon-bg:#586069;--color-toast-loading-icon-border:transparent;--color-timeline-text:#444d56;--color-timeline-badge-bg:#e1e4e8;--color-timeline-target-badge-border:#2188ff;--color-timeline-target-badge-shadow:#c8e1ff;--color-select-menu-border-secondary:#eaecef;--color-select-menu-shadow:0 0 18px rgba(27,31,35,0.4);--color-select-menu-backdrop-bg:rgba(27,31,35,0.5);--color-select-menu-backdrop-border:transparent;--color-select-menu-tap-highlight:rgba(209,213,218,0.5);--color-select-menu-tap-focus-bg:#dbedff;--color-box-blue-border:#c8e1ff;--color-box-row-yellow-bg:#fffbdd;--color-box-row-blue-bg:#f1f8ff;--color-box-header-blue-bg:#f1f8ff;--color-box-header-blue-border:#c8e1ff;--color-box-border-info:rgba(3,102,214,0.2);--color-box-bg-info:#f1f8ff;--color-box-border-warning:rgba(255,211,61,0.4);--color-box-bg-warning:#fffdef;--color-branch-name-text:rgba(27,31,35,0.6);--color-branch-name-icon:#a8bbd0;--color-branch-name-bg:#eaf5ff;--color-branch-name-link-text:#0366d6;--color-branch-name-link-icon:#a8bbd0;--color-branch-name-link-bg:#eaf5ff;--color-markdown-code-bg:rgba(27,31,35,0.05);--color-markdown-frame-border:#dfe2e5;--color-markdown-blockquote-border:#dfe2e5;--color-markdown-table-border:#dfe2e5;--color-markdown-table-tr-border:#c6cbd1;--color-menu-heading-text:#24292e;--color-menu-border-active:#f9826c;--color-menu-bg-active:transparent;--color-sidenav-selected-bg:#fff;--color-sidenav-border-active:#f9826c;--color-header-text:hsla(0,0%,100%,0.7);--color-header-bg:#24292e;--color-header-logo:#fff;--color-filter-item-bar-bg:#eff3f6;--color-hidden-text-expander-bg:#dfe2e5;--color-hidden-text-expander-bg-hover:#c6cbd1;--color-drag-and-drop-border:#c3c8cf;--color-upload-enabled-border:#dfe2e5;--color-upload-enabled-border-focused:#4a9eff;--color-previewable-comment-form-border:#c3c8cf;--color-underlinenav-border:rgba(209,213,218,0);--color-underlinenav-border-hover:#d1d5da;--color-underlinenav-border-active:#f9826c;--color-underlinenav-text:#24292e;--color-underlinenav-text-hover:#24292e;--color-underlinenav-text-active:#24292e;--color-underlinenav-icon:#959da5;--color-underlinenav-icon-hover:#959da5;--color-underlinenav-icon-active:#24292e;--color-underlinenav-counter-text:#24292e;--color-verified-badge-text:#22863a;--color-verified-badge-bg:#fff;--color-verified-badge-border:#e1e4e8;--color-social-count-bg:#fff;--color-tooltip-text:#fff;--color-tooltip-bg:#24292e;--color-header-search-bg:#24292e;--color-header-search-border:#444d56;--color-search-keyword-hl:#fffbdd;--color-diffstat-neutral-bg:#d1d5da;--color-diffstat-neutral-border:#d1d5da;--color-diffstat-deletion-bg:#d73a49;--color-diffstat-deletion-border:#d73a49;--color-diffstat-addition-bg:#28a745;--color-diffstat-addition-border:#28a745;--color-files-explorer-icon:#79b8ff;--color-hl-author-bg:#f1f8ff;--color-hl-author-border:#c8e1ff;--color-logo-subdued:#d1d5da;--color-discussion-border:#a2cbac;--color-discussion-bg-success:#28a745;--color-actions-workflow-table-sticky-bg:hsla(0,0%,100%,0.95);--color-repo-language-color-border:rgba(27,31,35,0.1);--color-code-selection-bg:#c8e1ff;--color-blob-line-highlight-bg:#fffbdd;--color-blob-line-highlight-border:transparent;--color-diff-addition-text:#22863a;--color-diff-addition-bg:#e6ffed;--color-diff-addition-border:#34d058;--color-diff-deletion-text:#cb2431;--color-diff-deletion-bg:#ffeef0;--color-diff-deletion-border:#d73a49;--color-diff-change-text:#b08800;--color-diff-change-bg:#fff5b1;--color-diff-change-border:#f9c513;--color-diff-blob-num-text:rgba(27,31,35,0.3);--color-diff-blob-num-hover-text:rgba(27,31,35,0.6);--color-diff-blob-addition-num-text:rgba(27,31,35,0.3);--color-diff-blob-addition-num-hover-text:rgba(27,31,35,0.6);--color-diff-blob-addition-num-bg:#cdffd8;--color-diff-blob-addition-line-bg:#e6ffed;--color-diff-blob-addition-word-bg:#acf2bd;--color-diff-blob-deletion-num-text:rgba(27,31,35,0.3);--color-diff-blob-deletion-num-hover-text:rgba(27,31,35,0.6);--color-diff-blob-deletion-num-bg:#ffdce0;--color-diff-blob-deletion-line-bg:#ffeef0;--color-diff-blob-deletion-word-bg:#fdb8c0;--color-diff-blob-hunk-text:rgba(27,31,35,0.7);--color-diff-blob-hunk-num-bg:#dbedff;--color-diff-blob-hunk-line-bg:#f1f8ff;--color-diff-blob-empty-block-bg:#fafbfc;--color-diff-blob-selected-line-highlight-bg:rgba(255,223,93,0.2);--color-diff-blob-selected-line-highlight-border:#ffd33d;--color-diff-blob-selected-line-highlight-mix-blend-mode:multiply;--color-diff-blob-expander-icon:#586069;--color-diff-blob-expander-hover-icon:#fff;--color-diff-blob-expander-hover-bg:#0366d6;--color-diff-blob-comment-button-icon:#fff;--color-diff-blob-comment-button-bg:#0366d6;--color-diff-blob-comment-button-gradient-bg:#0372ef;--color-global-nav-logo:#fff;--color-global-nav-bg:#24292e;--color-global-nav-text:#fff;--color-global-nav-icon:#fff;--color-global-nav-input-bg:#fafbfc;--color-global-nav-input-border:#fafbfc;--color-global-nav-input-icon:#d1d5da;--color-global-nav-input-placeholder:#959da5;--color-calendar-graph-day-bg:#ebedf0;--color-calendar-graph-day-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L1-bg:#9be9a8;--color-calendar-graph-day-L2-bg:#40c463;--color-calendar-graph-day-L3-bg:#30a14e;--color-calendar-graph-day-L4-bg:#216e39;--color-calendar-graph-day-L4-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L3-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L2-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L1-border:rgba(27,31,35,0.06);--color-footer-invertocat-octicon:#d1d5da;--color-footer-invertocat-octicon-hover:#6a737d;--color-pr-state-draft-text:#fff;--color-pr-state-draft-bg:#6a737d;--color-pr-state-draft-border:transparent;--color-pr-state-open-text:#fff;--color-pr-state-open-bg:#28a745;--color-pr-state-open-border:transparent;--color-pr-state-merged-text:#fff;--color-pr-state-merged-bg:#6f42c1;--color-pr-state-merged-border:transparent;--color-pr-state-closed-text:#fff;--color-pr-state-closed-bg:#d73a49;--color-pr-state-closed-border:transparent;--color-topic-tag-text:#0366d6;--color-topic-tag-bg:#f1f8ff;--color-topic-tag-hover-bg:#def;--color-topic-tag-active-bg:#e7f3ff;--color-merge-box-success-icon-bg:#28a745;--color-merge-box-success-icon-text:#fff;--color-merge-box-success-icon-border:transparent;--color-merge-box-success-indicator-bg:#28a745;--color-merge-box-success-indicator-border:transparent;--color-merge-box-merged-icon-bg:#6f42c1;--color-merge-box-merged-icon-text:#fff;--color-merge-box-merged-icon-border:transparent;--color-merge-box-merged-box-border:#6f42c1;--color-merge-box-neutral-icon-bg:#6a737d;--color-merge-box-neutral-icon-text:#fff;--color-merge-box-neutral-icon-border:transparent;--color-merge-box-neutral-indicator-bg:#6a737d;--color-merge-box-neutral-indicator-border:transparent;--color-merge-box-warning-icon-bg:#dbab09;--color-merge-box-warning-icon-text:#fff;--color-merge-box-warning-icon-border:transparent;--color-merge-box-warning-box-border:#ffd33d;--color-merge-box-warning-merge-highlight:transparent;--color-merge-box-error-icon-bg:#d73a49;--color-merge-box-error-icon-text:#fff;--color-merge-box-error-icon-border:transparent;--color-merge-box-error-indicator-bg:#d73a49;--color-merge-box-error-indicator-border:transparent;--color-project-card-bg:#fff;--color-project-header-bg:#24292e;--color-project-sidebar-bg:#fff;--color-project-gradient-in:#fff;--color-project-gradient-out:hsla(0,0%,100%,0);--color-marketing-icon-primary:#2188ff;--color-marketing-icon-secondary:#79b8ff;--color-prettylights-syntax-comment:#6a737d;--color-prettylights-syntax-constant:#005cc5;--color-prettylights-syntax-entity:#6f42c1;--color-prettylights-syntax-storage-modifier-import:#24292e;--color-prettylights-syntax-entity-tag:#22863a;--color-prettylights-syntax-keyword:#d73a49;--color-prettylights-syntax-string:#032f62;--color-prettylights-syntax-variable:#e36209;--color-prettylights-syntax-brackethighlighter-unmatched:#b31d28;--color-prettylights-syntax-invalid-illegal-text:#fafbfc;--color-prettylights-syntax-invalid-illegal-bg:#b31d28;--color-prettylights-syntax-carriage-return-text:#fafbfc;--color-prettylights-syntax-carriage-return-bg:#d73a49;--color-prettylights-syntax-string-regexp:#22863a;--color-prettylights-syntax-markup-list:#735c0f;--color-prettylights-syntax-markup-heading:#005cc5;--color-prettylights-syntax-markup-italic:#24292e;--color-prettylights-syntax-markup-bold:#24292e;--color-prettylights-syntax-markup-deleted-text:#b31d28;--color-prettylights-syntax-markup-deleted-bg:#ffeef0;--color-prettylights-syntax-markup-inserted-text:#22863a;--color-prettylights-syntax-markup-inserted-bg:#f0fff4;--color-prettylights-syntax-markup-changed-text:#e36209;--color-prettylights-syntax-markup-changed-bg:#ffebda;--color-prettylights-syntax-markup-ignored-text:#f6f8fa;--color-prettylights-syntax-markup-ignored-bg:#005cc5;--color-prettylights-syntax-meta-diff-range:#6f42c1;--color-prettylights-syntax-brackethighlighter-angle:#586069;--color-prettylights-syntax-sublimelinter-gutter-mark:#959da5;--color-prettylights-syntax-constant-other-reference-link:#032f62;--color-codemirror-text:#24292e;--color-codemirror-bg:#fff;--color-codemirror-gutters-bg:#fff;--color-codemirror-guttermarker-text:#fff;--color-codemirror-guttermarker-subtle-text:#d1d5da;--color-codemirror-linenumber-text:#959da5;--color-codemirror-cursor:#24292e;--color-codemirror-selection-bg:#c8e1ff;--color-codemirror-activeline-bg:#fafbfc;--color-codemirror-matchingbracket-text:#24292e;--color-codemirror-lines-bg:#fff;--color-codemirror-syntax-comment:#6a737d;--color-codemirror-syntax-constant:#005cc5;--color-codemirror-syntax-entity:#6f42c1;--color-codemirror-syntax-keyword:#d73a49;--color-codemirror-syntax-storage:#d73a49;--color-codemirror-syntax-string:#032f62;--color-codemirror-syntax-support:#005cc5;--color-codemirror-syntax-variable:#e36209;--color-ansi-black:#24292e;--color-ansi-black-bright:#2f363d;--color-ansi-white:#e1e4e8;--color-ansi-white-bright:#e1e4e8;--color-ansi-gray:#959da5;--color-ansi-red:#f97583;--color-ansi-red-bright:#fdaeb7;--color-ansi-green:#85e89d;--color-ansi-green-bright:#bef5cb;--color-ansi-yellow:#ffea7f;--color-ansi-yellow-bright:#fff5b1;--color-ansi-blue:#79b8ff;--color-ansi-blue-bright:#c8e1ff;--color-ansi-magenta:#b392f0;--color-ansi-magenta-bright:#d1bcf9;--color-ansi-cyan:#76e3ea;--color-ansi-cyan-bright:#b3f0ff;color-scheme:light}.markdown-body *{box-sizing:border-box}.markdown-body a:hover{text-decoration:underline}.markdown-body:after,.markdown-body:before,.markdown-body hr:after,.markdown-body hr:before{display:table;content:""}.markdown-body:after,.markdown-body hr:after{clear:both}.markdown-body table{border-spacing:0;border-collapse:collapse}.markdown-body td,.markdown-body th{padding:0}.markdown-body details summary,.markdown-body summary:hover{cursor:pointer}.markdown-body kbd{display:inline-block;padding:3px 5px;font:11px SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace;line-height:10px;color:var(--color-auto-gray-7);vertical-align:middle;background-color:var(--color-bg-secondary);border:1px solid var(--color-border-tertiary);border-radius:6px;box-shadow:inset 0 -1px 0 var(--color-border-tertiary)}.markdown-body table th{font-weight:600}.markdown-body blockquote{margin:0}.markdown-body ol ol,.markdown-body ul ol{list-style-type:lower-roman}.markdown-body ol ol ol,.markdown-body ol ul ol,.markdown-body ul ol ol,.markdown-body ul ul ol{list-style-type:lower-alpha}.markdown-body dd{margin-left:0}.markdown-body code,.markdown-body pre{font-family:SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace}.markdown-body ol ol,.markdown-body ol ul,.markdown-body ul ol,.markdown-body ul ul{margin-top:0;margin-bottom:0}.markdown-body input::-webkit-inner-spin-button,.markdown-body input::-webkit-outer-spin-button{margin:0;-webkit-appearance:none;appearance:none}.markdown-body :checked+.radio-label{position:relative;z-index:1;border-color:var(--color-border-info)}.markdown-body .border{border:1px solid var(--color-border-primary)!important}.markdown-body .border-0{border:0!important}.markdown-body .border-bottom{border-bottom:1px solid var(--color-border-primary)!important}.markdown-body .bg-white{background-color:var(--color-bg-primary)!important}.markdown-body .bg-gray-light{background-color:var(--color-bg-secondary)!important}.markdown-body .text-gray-light{color:var(--color-text-tertiary)!important}.markdown-body .px-3{padding-left:16px!important;padding-right:16px!important}.markdown-body .f6{font-size:12px!important}.markdown-body .lh-condensed{line-height:1.25!important}.markdown-body .text-bold{font-weight:600!important}.markdown-body .pl-c{color:var(--color-prettylights-syntax-comment)}.markdown-body .pl-c1,.markdown-body .pl-s .pl-v{color:var(--color-prettylights-syntax-constant)}.markdown-body .pl-e,.markdown-body .pl-en{color:var(--color-prettylights-syntax-entity)}.markdown-body .pl-s .pl-s1,.markdown-body .pl-smi{color:var(--color-prettylights-syntax-storage-modifier-import)}.markdown-body .pl-ent{color:var(--color-prettylights-syntax-entity-tag)}.markdown-body .pl-k{color:var(--color-prettylights-syntax-keyword)}.markdown-body .pl-pds,.markdown-body .pl-s,.markdown-body .pl-s .pl-pse .pl-s1,.markdown-body .pl-sr,.markdown-body .pl-sr .pl-sra,.markdown-body .pl-sr .pl-sre{color:var(--color-prettylights-syntax-string)}.markdown-body .pl-smw,.markdown-body .pl-v{color:var(--color-prettylights-syntax-variable)}.markdown-body .pl-bu{color:var(--color-prettylights-syntax-brackethighlighter-unmatched)}.markdown-body .pl-ii{color:var(--color-prettylights-syntax-invalid-illegal-text);background-color:var(--color-prettylights-syntax-invalid-illegal-bg)}.markdown-body .pl-c2{color:var(--color-prettylights-syntax-carriage-return-text);background-color:var(--color-prettylights-syntax-carriage-return-bg)}.markdown-body .pl-c2:before{content:"^M"}.markdown-body .pl-sr .pl-cce{font-weight:700;color:var(--color-prettylights-syntax-string-regexp)}.markdown-body .pl-ml{color:var(--color-prettylights-syntax-markup-list)}.markdown-body .pl-mh,.markdown-body .pl-mh .pl-en,.markdown-body .pl-ms{font-weight:700;color:var(--color-prettylights-syntax-markup-heading)}.markdown-body .pl-mi{font-style:italic;color:var(--color-prettylights-syntax-markup-italic)}.markdown-body .pl-mb{font-weight:700;color:var(--color-prettylights-syntax-markup-bold)}.markdown-body .pl-md{color:var(--color-prettylights-syntax-markup-deleted-text);background-color:var(--color-prettylights-syntax-markup-deleted-bg)}.markdown-body .pl-mi1{color:var(--color-prettylights-syntax-markup-inserted-text);background-color:var(--color-prettylights-syntax-markup-inserted-bg)}.markdown-body .pl-mc{color:var(--color-prettylights-syntax-markup-changed-text);background-color:var(--color-prettylights-syntax-markup-changed-bg)}.markdown-body .pl-mi2{color:var(--color-prettylights-syntax-markup-ignored-text);background-color:var(--color-prettylights-syntax-markup-ignored-bg)}.markdown-body .pl-mdr{font-weight:700;color:var(--color-prettylights-syntax-meta-diff-range)}.markdown-body .pl-ba{color:var(--color-prettylights-syntax-brackethighlighter-angle)}.markdown-body .pl-sg{color:var(--color-prettylights-syntax-sublimelinter-gutter-mark)}.markdown-body .pl-corl{text-decoration:underline;color:var(--color-prettylights-syntax-constant-other-reference-link)}.markdown-body .mb-0{margin-bottom:0!important}.markdown-body .my-2{margin-bottom:8px!important;margin-top:8px!important}.markdown-body .pl-0{padding-left:0!important}.markdown-body .py-0{padding-top:0!important;padding-bottom:0!important}.markdown-body .pl-1{padding-left:4px!important}.markdown-body .pl-2{padding-left:8px!important}.markdown-body .py-2{padding-top:8px!important;padding-bottom:8px!important}.markdown-body .pl-3{padding-left:16px!important}.markdown-body .pl-4{padding-left:24px!important}.markdown-body .pl-5{padding-left:32px!important}.markdown-body .pl-6{padding-left:40px!important}.markdown-body .pl-7{padding-left:48px!important}.markdown-body .pl-8{padding-left:64px!important}.markdown-body .pl-9{padding-left:80px!important}.markdown-body .pl-10{padding-left:96px!important}.markdown-body .pl-11{padding-left:112px!important}.markdown-body .pl-12{padding-left:128px!important}.markdown-body .pl-0-fluid{padding-left:0!important}.markdown-body .pl-1-fluid{padding-left:.25rem!important}.markdown-body .pl-2-fluid{padding-left:.5rem!important}.markdown-body .pl-3-fluid{padding-left:1rem!important}.markdown-body .pl-4-fluid{padding-left:1.5rem!important}.markdown-body .pl-5-fluid{padding-left:2rem!important}.markdown-body .pl-6-fluid{padding-left:2.5rem!important}.markdown-body .pl-7-fluid{padding-left:3rem!important}.markdown-body .pl-8-fluid{padding-left:4rem!important}.markdown-body .pl-9-fluid{padding-left:5rem!important}.markdown-body .pl-10-fluid{padding-left:6rem!important}.markdown-body .pl-11-fluid{padding-left:7rem!important}.markdown-body .pl-12-fluid{padding-left:8rem!important}.markdown-body [name=user-content-key-indicators] li::marker{color:#6ddb90}.markdown-body>:first-child{margin-top:0!important}.markdown-body>:last-child{margin-bottom:0!important}.markdown-body a:not([href]){color:inherit;text-decoration:none}.markdown-body blockquote,.markdown-body details,.markdown-body dl,.markdown-body ol,.markdown-body p,.markdown-body pre,.markdown-body table,.markdown-body ul{margin-top:0;margin-bottom:16px}.markdown-body blockquote{padding:0 1em;color:var(--color-text-tertiary);border-left:.25em solid var(--color-markdown-blockquote-border)}.markdown-body blockquote>:first-child{margin-top:0}.markdown-body blockquote>:last-child{margin-bottom:0}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{margin-top:24px;margin-bottom:16px;font-weight:600;line-height:1.25}.markdown-body h1,.markdown-body h2{font-size:2em;padding-bottom:.3em;border-bottom:1px solid var(--color-border-secondary)}.markdown-body h2{font-size:1.5em}.markdown-body h3{font-size:1.25em}.markdown-body h4{font-size:1em}.markdown-body h5{font-size:.875em}.markdown-body h6{font-size:.85em;color:var(--color-text-tertiary)}.markdown-body ol,.markdown-body ul{padding-left:2em}.markdown-body li{word-wrap:break-all}.markdown-body li>p{margin-top:16px}.markdown-body li+li{margin-top:.25em}.markdown-body dl{padding:0}.markdown-body dl dt{padding:0;margin-top:16px;font-size:1em;font-style:italic;font-weight:600}.markdown-body dl dd{padding:0 16px;margin-bottom:16px}.markdown-body table{display:block;width:-webkit-max-content;width:-moz-max-content;width:max-content;max-width:100%;overflow:auto;color:silver!important}.markdown-body table td,.markdown-body table th{padding:6px 13px;border:1px solid var(--color-markdown-table-border)}.markdown-body table tr{background-color:var(--color-bg-primary);border-top:1px solid var(--color-markdown-table-tr-border);background:#141414!important;border-color:#343434!important}.markdown-body table tr:nth-child(2n){background-color:var(--color-bg-tertiary);background:#181818!important}.markdown-body img[align=right]{padding-left:20px}.markdown-body img[align=left]{padding-right:20px}.markdown-body code{padding:.2em .4em;margin:0;font-size:85%;background-color:var(--color-markdown-code-bg);border-radius:6px}.markdown-body pre{word-wrap:normal}.markdown-body pre>code{padding:0;margin:0;font-size:100%;word-break:normal;white-space:pre;background:0 0;border:0}.markdown-body .highlight{margin-bottom:16px}.markdown-body .highlight pre{margin-bottom:0;word-break:normal}.markdown-body .highlight pre,.markdown-body pre{padding:16px;overflow:auto;font-size:85%;line-height:1.45;background-color:var(--color-bg-tertiary);border-radius:6px}.markdown-body pre code{display:inline;max-width:auto;padding:0;margin:0;overflow:visible;line-height:inherit;word-wrap:normal;background-color:transparent;background-color:initial}.markdown-body .commit-tease-sha{display:inline-block;font-family:SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace;font-size:90%;color:var(--color-auto-gray-7)}.markdown-body .blob-wrapper{overflow-x:auto;overflow-y:hidden}.markdown-body .blob-wrapper-embedded{max-height:240px;overflow-y:auto}.markdown-body .blob-code,.markdown-body .blob-num{padding-right:10px;padding-left:10px;line-height:20px;vertical-align:top}.markdown-body .blob-num{width:1%;min-width:50px;font-family:SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace;font-size:12px;color:var(--color-diff-blob-num-text);text-align:right;white-space:nowrap;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.markdown-body .blob-num:hover{color:var(--color-diff-blob-num-hover-text)}.markdown-body .blob-num:before{content:attr(data-line-number)}.markdown-body .blob-code{position:relative}.markdown-body .blob-code-inner{overflow:visible;font-family:SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace;font-size:12px;color:var(--color-text-primary);word-wrap:normal;white-space:pre}.markdown-body .blob-code-inner::-moz-selection,.markdown-body .blob-code-inner>::-moz-selection{background-color:var(--color-code-selection-bg)}.markdown-body .blob-code-inner::selection,.markdown-body .blob-code-inner>::selection{background-color:var(--color-code-selection-bg)}.markdown-body .pl-token.active,.markdown-body .pl-token:hover{cursor:pointer;background:#ffea7f}.markdown-body .emoji-picker-tab .btn-outline:not(:hover){background-color:transparent;background-color:initial}.markdown-body .tab-size[data-tab-size="1"]{-moz-tab-size:1;-o-tab-size:1;tab-size:1}.markdown-body .tab-size[data-tab-size="2"]{-moz-tab-size:2;-o-tab-size:2;tab-size:2}.markdown-body .tab-size[data-tab-size="3"]{-moz-tab-size:3;-o-tab-size:3;tab-size:3}.markdown-body .tab-size[data-tab-size="4"]{-moz-tab-size:4;-o-tab-size:4;tab-size:4}.markdown-body .tab-size[data-tab-size="5"]{-moz-tab-size:5;-o-tab-size:5;tab-size:5}.markdown-body .tab-size[data-tab-size="6"]{-moz-tab-size:6;-o-tab-size:6;tab-size:6}.markdown-body .tab-size[data-tab-size="7"]{-moz-tab-size:7;-o-tab-size:7;tab-size:7}.markdown-body .tab-size[data-tab-size="8"]{-moz-tab-size:8;-o-tab-size:8;tab-size:8}.markdown-body .tab-size[data-tab-size="9"]{-moz-tab-size:9;-o-tab-size:9;tab-size:9}.markdown-body .tab-size[data-tab-size="10"]{-moz-tab-size:10;-o-tab-size:10;tab-size:10}.markdown-body .tab-size[data-tab-size="11"]{-moz-tab-size:11;-o-tab-size:11;tab-size:11}.markdown-body .tab-size[data-tab-size="12"]{-moz-tab-size:12;-o-tab-size:12;tab-size:12}.markdown-body .task-list-item{list-style-type:none}.markdown-body .task-list-item+.task-list-item{margin-top:3px}.markdown-body .task-list-item input{margin:0 .2em .25em -1.6em;vertical-align:middle}.markdown-body .AvatarStack-body:not(:hover){background-color:transparent;background-color:initial}.markdown-body :root{--color-calendar-halloween-graph-day-L1-bg:#ffee4a;--color-calendar-halloween-graph-day-L2-bg:#ffc501;--color-calendar-halloween-graph-day-L3-bg:#fe9600;--color-calendar-halloween-graph-day-L4-bg:#03001c;--color-workflow-card-connector:var(--color-scale-gray-3);--color-workflow-card-connector-bg:var(--color-scale-gray-3);--color-workflow-card-connector-inactive:var(--color-border-primary);--color-workflow-card-connector-inactive-bg:var(--color-border-primary);--color-workflow-card-connector-highlight:var(--color-scale-blue-4);--color-workflow-card-connector-highlight-bg:var(--color-scale-blue-4);--color-workflow-card-bg:var(--color-scale-white);--color-workflow-card-inactive-bg:var(--color-bg-canvas-inset);--color-workflow-card-header-shadow:transparent;--color-workflow-card-progress-complete-bg:var(--color-scale-blue-4);--color-workflow-card-progress-incomplete-bg:var(--color-scale-gray-2);--color-checks-donut-error:var(--color-scale-red-6);--color-checks-donut-pending:var(--color-scale-yellow-7);--color-checks-donut-success:var(--color-scale-green-5);--color-checks-donut-neutral:var(--color-scale-gray-4);--color-discussions-answer-border:var(--color-scale-green-5);--color-discussions-answer-icon:var(--color-scale-green-6);--color-discussions-answer-text:var(--color-scale-green-6);--color-discussions-state-answered-icon:var(--color-scale-white);--color-bg-discussions-row-emoji-box:rgba(209,213,218,0.5);--color-upvote-icon-bg:var(--color-scale-blue-1);--color-downvote-icon-bg:var(--color-scale-red-1);--color-search-hover-hl:var(--color-scale-white);--color-notifications-button-text:var(--color-text-secondary);--color-notifications-button-hover-text:var(--color-text-primary);--color-notifications-button-hover-bg:var(--color-auto-gray-2);--color-notifications-row-read-bg:var(--color-bg-tertiary);--color-notifications-row-bg:var(--color-auto-white);--color-timeline-merged-bg:var(--color-auto-purple-5);--color-current-user-tip-bg:var(--color-box-bg-info);--color-current-user-tip-border:#d4e2f8;--color-promo-color-modes-toggle-track-border:var(--color-scale-gray-3);--color-promo-color-modes-toggle-track-bg:var(--color-scale-white);--color-promo-color-modes-toggle-thumb-bg:var(--color-scale-gray-8);--color-promo-color-modes-toggle-moon:var(--color-scale-yellow-4);--color-profile-color-modes-toggle-track-border:var(--color-scale-gray-3);--color-profile-color-modes-toggle-track-bg:var(--color-scale-white);--color-profile-color-modes-toggle-thumb-bg:var(--color-scale-gray-8);--color-profile-color-modes-toggle-moon:var(--color-scale-yellow-4)}.markdown-body :checked+.hx_theme-toggle{border-color:var(--color-state-hover-primary-border)}.markdown-body ::-webkit-calendar-picker-indicator{filter:invert(50%)}.markdown-body .AvatarStack--three-plus .AvatarStack-body:not(:hover) .avatar:nth-of-type(n+6){display:none;opacity:0}.markdown-body .AvatarStack--three-plus .AvatarStack-body:not(:hover)>.avatar-more+.avatar:nth-of-type(3) img{opacity:.5}.markdown-body .AvatarStack--three-plus .AvatarStack-body:not(:hover)>.avatar-more~.avatar:nth-of-type(4) img{opacity:.33}.markdown-body .AvatarStack--three-plus .AvatarStack-body:not(:hover)>.avatar-more~.avatar:nth-of-type(5) img{opacity:.25}.markdown-body .AvatarStack--three-plus .AvatarStack-body:not(:hover)>.avatar-more+.avatar:nth-of-type(3){margin-right:0;margin-left:-6px}.markdown-body .AvatarStack--three-plus .AvatarStack-body:not(:hover)>.avatar-more~.avatar:nth-of-type(4),.markdown-body .AvatarStack--three-plus .AvatarStack-body:not(:hover)>.avatar-more~.avatar:nth-of-type(5){margin-right:0;margin-left:-18px}.markdown-body .AvatarStack--three-plus.AvatarStack--right .AvatarStack-body:not(:hover)>.avatar-more+.avatar:nth-of-type(3){margin-right:-6px;margin-left:0}.markdown-body .AvatarStack--three-plus.AvatarStack--right .AvatarStack-body:not(:hover)>.avatar-more~.avatar:nth-of-type(4),.markdown-body .AvatarStack--three-plus.AvatarStack--right .AvatarStack-body:not(:hover)>.avatar-more~.avatar:nth-of-type(5){margin-right:-18px;margin-left:0}.markdown-body .AvatarStack--three-plus.AvatarStack--large .AvatarStack-body:not(:hover)>.avatar-more+.avatar:nth-of-type(3){margin-right:0;margin-left:-2px}.markdown-body .AvatarStack--three-plus.AvatarStack--large .AvatarStack-body:not(:hover)>.avatar-more~.avatar:nth-of-type(4),.markdown-body .AvatarStack--three-plus.AvatarStack--large .AvatarStack-body:not(:hover)>.avatar-more~.avatar:nth-of-type(5){margin-right:0;margin-left:-30px}.markdown-body .hx_avatar_stack_commit .AvatarStack--three-plus .AvatarStack-body:not(:hover)>.avatar-more+.avatar:nth-of-type(3){margin-right:0;margin-left:-10px}.markdown-body .hx_avatar_stack_commit .AvatarStack--three-plus .AvatarStack-body:not(:hover)>.avatar-more~.avatar:nth-of-type(4),.markdown-body .hx_avatar_stack_commit .AvatarStack--three-plus .AvatarStack-body:not(:hover)>.avatar-more~.avatar:nth-of-type(5){margin-right:0;margin-left:-21px}.markdown-body .rounded-1{border-radius:6px!important}body{background:#181818}.markdown-body{color:silver!important;background:#181818!important;border-color:#484848!important}.markdown-body blockquote,.markdown-body h1,.markdown-body h2,.markdown-body table td,.markdown-body table th{border-color:#343434!important}.markdown-body .octicon-link,.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4{color:#e0e0e0!important}.markdown-body blockquote strong{color:grey!important}.markdown-body blockquote,.markdown-body blockquote code{color:#666!important}.markdown-body .highlight pre,.markdown-body code,.markdown-body pre,.markdown-body tt,body.blog pre{border:1px solid hsla(0,0%,100%,.1)!important}.markdown-body code,.markdown-body tt{background:#202020!important}.markdown-body pre{background:#141414!important;color:#ccc!important}.markdown-body pre code{border:0!important}.markdown-body code[class*=language-]{color:silver!important;text-shadow:none!important}.markdown-body code[class*=language-] .operator,.markdown-body code[class*=language-] .string,.markdown-body pre code{background:0 0!important}.markdown-body a:not([href*="/labels/"]),.markdown-body a[href*="/labels/"],.markdown-body blockquote a code{color:#4183c4!important}',""]),o.exports=t},367:function(o,e,r){"use strict";r(267)},368:function(o,e,r){var t=r(18)(!1);t.push([o.i,".timeout-progress .v-progress-circular__overlay{transition:none!important}",""]),o.exports=t},406:function(o,e,r){"use strict";r.r(e),e.default={state:function(){return{workflows:{CloudFront:{invalidation:{title:"Invalidation not working.",description:"",data:{distributionId:"",invalidationId:"",url:""},input:[{label:"Distribution ID",placeholder:"Example: EDFDVBD6EXAMPLE",store:"distributionId",type:"text"},{label:"Invalidation Request ID",placeholder:"Example: I2J0I21PCUYOIK ",store:"invalidationId",type:"text"},{label:"File URL",placeholder:"https://example.com/some-path/index.html",store:"url",type:"text"}],steps:[{name:"Check invalidation.",js:'let url = new URL($.data.url);\nlet path = url.pathname;\n\nlet res = await $.aws.cloudfront.getInvalidation({\n  Id: $.data.invalidationId,\n  DistributionId: $.data.distributionId,\n});\n\nlet rules = $.jp.query(res, `$..Items[*]`);\nrules.map((r) => {\n  if (r.endsWith("*")) {\n    if (path.startsWith(r.slice(0, -1))) {\n      $.done(`File matches the rule: ${r}`);\n    }\n  } else {\n    if (path == r) {\n      $.done(`File matches the rule: ${r}`);\n    }\n  }\n});\n\n$.err = `/md\nNo rule can be matched.\\n\nThe provided invalidation request will invalidate those files:\\n\n`;\nrules.map((r) => ($.err += `- ${url.origin}${r}\\n`));\n'}]},url:{title:"URL is not accessible.",description:"",data:{distributionId:"",url:"",distribution:null},input:[{label:"Distribution ID",type:"text",placeholder:"Example: EDFDVBD6EXAMPLE",store:"distributionId"},{label:"URL of Your File",type:"text",placeholder:"https://example.com/index.html",store:"url"}],steps:[{name:"Retrieve Distribution Info",js:"let res = await $.aws.cloudfront.getDistribution({ Id: $.data.distributionId });\n\n$.data.distribution = $.jp.query(res, `$..Distribution`)[0];\n\n$.ok = `/md\nARN: \\`${$.data.distribution.ARN}\\`\n`;\n"},{name:"Check Status",js:'if ($.data.distribution.Status !== "Deployed")\n  $.panic(\n    `Distribution not in \'Deployed\' status. Current status: ${$.data.distribution.Status} .`\n  );\n\n$.ok = "Status is Deployed";\n'},{name:"Check Domain Name",js:"let url = new URL($.data.url);\n\n// check cloudfront domain name\nlet domainName = $.data.distribution.DomainName;\nif (domainName == url.host) {\n  if (domainName.endsWith(\".cn\")) {\n    $.panic(\n      `You have to use your own domain name in AWS China. Current domain name: ${domainName}`\n    );\n  }\n} else {\n  // using custom domain name\n  let customDomainNames = $.jp.query(\n    $.data.distribution,\n    `$..DistributionConfig.Aliases.Items[*]`\n  );\n  if (customDomainNames.length === 0 || !customDomainNames.includes(url.host))\n    $.panic(\n      `Domain name mismatch. Maybe you need to add an alternative domain name.`\n    );\n  domainName = url.host;\n\n  // check ICP recordal\n  if (\n    $.jp.query(\n      $.data.distribution,\n      `$..AliasICPRecordals[?(@.CNAME=='${domainName}' && @.ICPRecordalStatus=='APPROVED')]`\n    ).length === 0\n  )\n    $.panic(`ICP recordal not approved. Please contact AWS support.`);\n\n  $.info += `You are using a custom domain name ${domainName}. Please check you have the right DNS record. `;\n}\n\n// check whether domain name is one of the origin\nif (\n  $.jp\n    .query($.data.distribution, `$..Origins.Items[*].DomainName`)\n    .includes(domainName)\n) {\n  $.info += `The domain name ${domainName} is one of the origin domain name, which might be a wrong configuration. `;\n}\n\nif ($.info.length === 0) $.done(\"OK\");\n"},{name:"Check Root Object",js:'let url = new URL($.data.url);\n\nif (url.pathname === "/") {\n  if (!$.data.distribution.DistributionConfig.DefaultRootObject)\n    $.info = `You are accessing the root object, but you did not set the default root object of this distribution.`;\n  else\n    $.info = `Your request will access the default root object: ${$.data.distribution.DistributionConfig.DefaultRootObject} .`;\n} else {\n  $.done("You are not accessing the root object.");\n}\n'},{name:"Check S3 OAI",js:'let s3origins = [];\nlet withoutOAI = [];\n$.data.distribution.DistributionConfig.Origins.Items.map((i) => {\n  let parts = i.DomainName.split(".").slice(-5);\n  if (\n    (i.DomainName.endsWith(".amazonaws.com") &&\n      (parts[1] == "s3" || parts[2] == "s3")) ||\n    (i.DomainName.endsWith(".amazonaws.com.cn") &&\n      (parts[0] == "s3" || parts[1] == "s3"))\n  ) {\n    s3origins.push(i.DomainName);\n    if (!i.S3OriginConfig?.OriginAccessIdentity) {\n      withoutOAI.push(i.DomainName);\n    }\n  }\n});\n\nif (s3origins.length === 0) $.done("No S3 origin.");\n\n$.info = `/md\nFound S3 origins:\n${s3origins\n  .map((o) => `- ${o} ${withoutOAI.includes(o) ? "" : "(with OAI)"}`)\n  .join("\\n")}\n\nPlease check this distribution can access those S3 bucket (for example, S3 is public accessible), or OAIs are correctly configured in S3 policy.\n`;\n'}]}},EC2:{ping:{title:"Can't ping EC2 instance from the Internet.",description:"",data:{instanceId:"",securityGroupIds:[],vpcId:"",subnetId:""},input:[{label:"Instance ID",placeholder:"i-01234567891234567",store:"instanceId",type:"text"}],steps:[{name:"Instance status check.",js:'let res = await $.aws.ec2.describeInstanceStatus({\n  InstanceIds: [$.data.instanceId],\n});\n\nlet state = res.InstanceStatuses[0].InstanceState.Name;\nif (state != "running") {\n  $.panic(`Instance is not running. Instance state: ${state}.`);\n}\n\nlet iStatus = res.InstanceStatuses[0].InstanceStatus.Status;\nif (iStatus != "ok") {\n  $.panic(`Instance status check failed. Status: ${iStatus}.`);\n}\n\nlet sStatus = res.InstanceStatuses[0].SystemStatus.Status;\nif (sStatus != "ok") {\n  $.panic(`System status check failed. Status: ${sStatus}.`);\n}\n\n$.done("Instance is running, all status check passed.");\n'},{name:"Retrieve instance info, check public IP.",js:'let res = await $.aws.ec2.describeInstances({\n  InstanceIds: [$.data.instanceId],\n});\n\nlet publicIps = $.jp.query(res, "$..PrivateIpAddresses..PublicIp");\nif (publicIps.length === 0) {\n  $.panic("No public IP is associated to this instance.");\n}\n\n$.data.securityGroupIds = $.jp.query(res, "$..SecurityGroups[*].GroupId");\n$.data.vpcId = $.jp.query(res, "$..VpcId")[0];\n$.data.subnetId = $.jp.query(res, "$..SubnetId")[0];\n\n$.done(`/md\n- Public IP: ${publicIps.join(", ")}\n- Security groups: ${$.data.securityGroupIds.join(", ")}\n- VPC ID: ${$.data.vpcId}\n- Subnet ID: ${$.data.subnetId}\n`);\n'},{name:"Check security group inbound rules.",js:'let window = await $.import(\n  "https://unpkg.com/awsome-doctor-utils@0.1.0/dist/bundle.js"\n);\n$.data.utils = window.awsomeUtils;\n\nlet result = await $.data.utils.sg.checkPort({\n  ec2: $.aws.ec2,\n  jp: $.jp,\n  direction: "in",\n  securityGroupIds: $.data.securityGroupIds,\n  protocol: "icmp",\n  port: 8, // echo request\n});\n\nif (result.anyTrafficPeer.no && result.peer.no) {\n  $.err += `No IP is allowed to access this instance using ping, please fix your security group inbound rules. `;\n  $.err += `Security group ids: ${$.data.securityGroupIds.join(", ")}`;\n  return;\n}\n\nif (result.anyTrafficPeer.any) {\n  $.done("All traffic allowed from 0.0.0.0/0.");\n} else if (result.anyTrafficPeer.cidr.length !== 0) {\n  $.info += `All traffic from those CIDRs are allowed: ${result.anyTrafficPeer.cidr.join(\n    ", "\n  )}. `;\n}\n\nif (result.peer.any) {\n  $.done(`Traffic is allowed from 0.0.0.0/0 using ping.`);\n} else if (result.peer.cidr.length !== 0) {\n  $.info += `Traffic is allowed from those CIDRs: ${result.peer.cidr.join(\n    ", "\n  )}. `;\n}\n\nif ($.info === "") {\n  $.err += `No IP is allowed to access this instance using ping, please fix your security group inbound rules. `;\n  $.err += `Security group ids: ${$.data.securityGroupIds.join(", ")}`;\n  return;\n}\n'},{name:"Check route table Internet Gateway.",js:'let res = await $.data.utils.vpc.checkSubnetIgw({\n  ec2: $.aws.ec2,\n  jp: $.jp,\n  subnetId: $.data.subnetId,\n  vpcId: $.data.vpcId,\n});\n\nif (res.type == "no") {\n  $.panic(`Subnet ${$.data.subnetId} has no route to an Internet Gateway.`);\n}\n\nif (res.type == "any") {\n  $.done(`0.0.0.0/0 will be route to an Internet Gateway`);\n} else if (res.type == "cidr") {\n  $.info += `Those CIDR blocks will be route to an Internet Gateway: ${res.cidr.join(\n    ", "\n  )}. `;\n}\n'},{name:"Check network ACL.",js:'let inbound = await $.data.utils.vpc.checkSubnetNacl({\n  ec2: $.aws.ec2,\n  jp: $.jp,\n  subnetId: $.data.subnetId,\n  direction: "in",\n  protocol: "icmp",\n  port: 8,\n});\nlet outbound = await $.data.utils.vpc.checkSubnetNacl({\n  ec2: $.aws.ec2,\n  jp: $.jp,\n  subnetId: $.data.subnetId,\n  direction: "out",\n  protocol: "icmp",\n  port: 0,\n});\n\nlet stringifyRules = (rules) => {\n  let result = "";\n  rules.map(\n    (r) =>\n      (result += `- ${r.allow ? "allow" : "deny"} ${r.cidr}, rule number=${\n        r.number != 32767 ? r.number : "*"\n      }\\n`)\n  );\n  return result;\n};\n\nif (inbound.any && outbound.any) {\n  $.done("All traffic allowed.");\n} else {\n  $.info = "/md\\n";\n\n  if (inbound.any) {\n    $.info += `All inbound traffic allowed.\\n`;\n  } else {\n    $.info += `\nRelated inbound rules:\n${stringifyRules(inbound.rule)}\n\\n`;\n  }\n\n  if (outbound.any) {\n    $.info += `All outbound traffic allowed.\\n`;\n  } else {\n    $.info += `\nRelated outbound rules:\n${stringifyRules(outbound.rule)}\n\\n`;\n  }\n}\n'}]},port:{title:"A port is not accessible from the Internet.",description:"",data:{instanceId:"",securityGroupIds:[],vpcId:"",subnetId:"",port:22,protocol:"tcp"},input:[{label:"Instance ID",placeholder:"i-01234567891234567",store:"instanceId",type:"text"},{label:"Protocol",placeholder:"tcp / udp / icmp",store:"protocol",type:"text"},{label:"Port",placeholder:"0-65535",store:"port",type:"text"}],steps:[{name:"Instance status check.",js:'let res = await $.aws.ec2.describeInstanceStatus({\n  InstanceIds: [$.data.instanceId],\n});\n\nlet state = res.InstanceStatuses[0].InstanceState.Name;\nif (state != "running") {\n  $.panic(`Instance is not running. Instance state: ${state}.`);\n}\n\nlet iStatus = res.InstanceStatuses[0].InstanceStatus.Status;\nif (iStatus != "ok") {\n  $.panic(`Instance status check failed. Status: ${iStatus}.`);\n}\n\nlet sStatus = res.InstanceStatuses[0].SystemStatus.Status;\nif (sStatus != "ok") {\n  $.panic(`System status check failed. Status: ${sStatus}.`);\n}\n\n$.done("Instance is running, all status check passed.");\n'},{name:"Retrieve instance info, check public IP.",js:'let res = await $.aws.ec2.describeInstances({\n  InstanceIds: [$.data.instanceId],\n});\n\nlet publicIps = $.jp.query(res, "$..PrivateIpAddresses..PublicIp");\nif (publicIps.length === 0) {\n  $.panic("No public IP is associated to this instance.");\n}\n\n$.data.securityGroupIds = $.jp.query(res, "$..SecurityGroups[*].GroupId");\n$.data.vpcId = $.jp.query(res, "$..VpcId")[0];\n$.data.subnetId = $.jp.query(res, "$..SubnetId")[0];\n\n$.done(`/md\n- Public IP: ${publicIps.join(", ")}\n- Security groups: ${$.data.securityGroupIds.join(", ")}\n- VPC ID: ${$.data.vpcId}\n- Subnet ID: ${$.data.subnetId}\n`);\n'},{name:"Check security group inbound rules.",js:'let window = await $.import(\n  "https://unpkg.com/awsome-doctor-utils@0.1.0/dist/bundle.js"\n);\n$.data.utils = window.awsomeUtils;\n\nlet result = await $.data.utils.sg.checkPort({\n  ec2: $.aws.ec2,\n  jp: $.jp,\n  direction: "in",\n  securityGroupIds: $.data.securityGroupIds,\n  protocol: $.data.protocol,\n  port: $.data.port,\n});\n\nif (result.anyTrafficPeer.no && result.peer.no) {\n  $.err += `No IP is allowed to access this instance using protocol ${$.data.protocol} at port ${$.data.port}, please fix your security group inbound rules. `;\n  $.err += `Security group ids: ${$.data.securityGroupIds.join(", ")}`;\n  return;\n}\n\nif (result.anyTrafficPeer.any) {\n  $.done("All traffic allowed from 0.0.0.0/0.");\n} else if (result.anyTrafficPeer.cidr.length !== 0) {\n  $.info += `All traffic from those CIDRs are allowed: ${result.anyTrafficPeer.cidr.join(\n    ", "\n  )}. `;\n}\n\nif (result.peer.any) {\n  $.done(\n    `Traffic is allowed from 0.0.0.0/0 using protocol ${$.data.protocol} at port ${$.data.port}.`\n  );\n} else if (result.peer.cidr.length !== 0) {\n  $.info += `Traffic is allowed from those CIDRs: ${result.peer.cidr.join(\n    ", "\n  )}. `;\n}\n\nif ($.info === "") {\n  $.err += `No IP is allowed to access this instance using protocol ${$.data.protocol} at port ${$.data.port}, please fix your security group inbound rules. `;\n  $.err += `Security group ids: ${$.data.securityGroupIds.join(", ")}`;\n  return;\n}\n'},{name:"Check route table Internet Gateway.",js:'let res = await $.data.utils.vpc.checkSubnetIgw({\n  ec2: $.aws.ec2,\n  jp: $.jp,\n  subnetId: $.data.subnetId,\n  vpcId: $.data.vpcId,\n});\n\nif (res.type == "no") {\n  $.panic(`Subnet ${$.data.subnetId} has no route to an Internet Gateway.`);\n}\n\nif (res.type == "any") {\n  $.done(`0.0.0.0/0 will be route to an Internet Gateway`);\n} else if (res.type == "cidr") {\n  $.info += `Those CIDR blocks will be route to an Internet Gateway: ${res.cidr.join(\n    ", "\n  )}. `;\n}\n'},{name:"Check network ACL.",js:'let inbound = await $.data.utils.vpc.checkSubnetNacl({\n  ec2: $.aws.ec2,\n  jp: $.jp,\n  subnetId: $.data.subnetId,\n  direction: "in",\n  protocol: $.data.protocol,\n  port: $.data.port,\n});\nlet outbound = await $.data.utils.vpc.checkSubnetNacl({\n  ec2: $.aws.ec2,\n  jp: $.jp,\n  subnetId: $.data.subnetId,\n  direction: "out",\n  protocol: $.data.protocol,\n  port: $.data.port,\n});\n\nlet stringifyRules = (rules) => {\n  let result = "";\n  rules.map(\n    (r) =>\n      (result += `- ${r.allow ? "allow" : "deny"} ${r.cidr}, rule number=${\n        r.number != 32767 ? r.number : "*"\n      }\\n`)\n  );\n  return result;\n};\n\nif (inbound.any && outbound.any) {\n  $.done("All traffic allowed.");\n} else {\n  $.info = "/md\\n";\n\n  if (inbound.any) {\n    $.info += `All inbound traffic allowed.\\n`;\n  } else {\n    $.info += `\nRelated inbound rules:\n${stringifyRules(inbound.rule)}\n\\n`;\n  }\n\n  if (outbound.any) {\n    $.info += `All outbound traffic allowed.\\n`;\n  } else {\n    $.info += `\nRelated outbound rules:\n${stringifyRules(outbound.rule)}\n\\n`;\n  }\n}\n'}]}},ELB:{"unhealthy-target":{title:"Target group health check failed.",description:"",data:{tgName:"",lbSgs:[],lbArn:"",lbName:"",healthCheckPort:80,unhealthyTargets:[],tgArn:""},input:[{label:"Target group name",placeholder:"",store:"tgName",type:"text"},{label:"Load balancer name",placeholder:"",store:"lbName",type:"text"}],steps:[{name:"Retrieve load balancer info.",js:'let res = await $.aws.elbv2.describeLoadBalancers({ Names: [$.data.lbName] });\n\nlet lb = res.LoadBalancers[0];\nlet type = lb.Type;\n$.data.lbSgs = lb.SecurityGroups;\n$.data.lbArn = lb.LoadBalancerArn;\n\n$.ok = `/md\n- Security groups: \\`${$.data.lbSgs.join(", ")}\\`.\n- ARN: \\`${$.data.lbArn}\\`. \n- Type: \\`${type}\\`.\n`;\n'},{name:"Retrieve target group info.",js:"let res = await $.aws.elbv2.describeTargetGroups({ Names: [$.data.tgName] });\nlet tg = res.TargetGroups[0];\n\nif (!tg.LoadBalancerArns.includes($.data.lbArn)) {\n  $.panic(\n    `Target group '${$.data.tgName}' is not associated with the load balancer '${$.data.lbName}'.`\n  );\n}\nif (!tg.HealthCheckEnabled) {\n  $.panic(`Health check is not enabled for target group '${$.data.tgName}'.`);\n}\nif (tg.TargetType !== \"instance\") {\n  $.panic(`Currently the target type ${tg.TargetType} is not supported.`);\n}\n\n$.data.tgArn = tg.TargetGroupArn;\n$.data.healthCheckPort = tg.HealthCheckPort;\n\n$.info = `/md\n- Protocol: \\`${tg.Protocol}\\`\n  - Version: \\`${tg.ProtocolVersion}\\`\n- Load balancer listen port: \\`${tg.Port}\\`\n- Target type: \\`${tg.TargetType}\\`\n- Health check\n  - Enabled: \\`${tg.HealthCheckEnabled}\\`\n  - Protocol: \\`${tg.HealthCheckProtocol}\\`\n  - Port: \\`${$.data.healthCheckPort}\\`\n  - Path: \\`${tg.HealthCheckPath}\\`\n  - Success codes: \\`${tg.Matcher.HttpCode || tg.Matcher.GrpcCode}\\`\n- Arn: \\`${$.data.tgArn}\\`\n`;\n"},{name:"Retrieve unhealthy targets.",js:"let res = await $.aws.elbv2.describeTargetHealth({\n  TargetGroupArn: $.data.tgArn,\n});\n\nif (res.TargetHealthDescriptions.length === 0) {\n  $.info = `No targets in the target group '${$.data.tgName}'. `;\n  $.stop = true;\n  return;\n}\n\n$.data.unhealthyTargets = $.jp.query(\n  res,\n  \"$.TargetHealthDescriptions[?(@.TargetHealth.State == 'unhealthy')]\"\n);\n\n// not unhealthy and not healthy\nlet otherTargets = $.jp.query(\n  res,\n  \"$.TargetHealthDescriptions[?(@.TargetHealth.State != 'unhealthy' && @.TargetHealth.State != 'healthy')]\"\n);\n\nif ($.data.unhealthyTargets.length === 0) {\n  if (otherTargets.length === 0) {\n    $.done(\"All targets are healthy.\");\n  } else {\n    $.info += `Those targets are not in 'unhealthy' state and not in 'healthy' state, ignored: `;\n    otherTargets\n      .map((t) => {\n        $.info += `${t.Target.Id} (${t.TargetHealth.State})`;\n      })\n      .join(\", \");\n    $.info += `. `;\n  }\n  $.stop = true;\n  return;\n}\n\n$.info = `/md\n### Unhealthy Targets\n`;\n$.data.unhealthyTargets.map((t) => {\n  $.info += `\n- Instance ID: \\`${t.Target.Id}\\`\n  - Traffic port: \\`${t.Target.Port}\\`\n  - Health check port: \\`${t.HealthCheckPort}\\`\n  - Unhealthy reason: \\`${t.TargetHealth.Reason}\\`\n  - Unhealthy description: ${t.TargetHealth.Description}\n  `;\n});\n"},{name:"Check unhealthy targets security groups' inbound rules.",js:'let window = await $.import(\n  "https://unpkg.com/awsome-doctor-utils@0.1.0/dist/bundle.js"\n);\n$.data.utils = window.awsomeUtils;\n\nlet sgInfo = [];\n\nfor (let i = 0; i < $.data.unhealthyTargets.length; ++i) {\n  let t = $.data.unhealthyTargets[i];\n\n  let result = await $.data.utils.sg.checkEC2Instances({\n    ec2: $.aws.ec2,\n    jp: $.jp,\n    instanceIds: [t.Target.Id],\n    direction: "in",\n    protocol: "tcp",\n    port: t.HealthCheckPort,\n  });\n\n  // traffic allowed from any source\n  if (result.anyTrafficPeer.any || result.peer.any) {\n    // skip this instance\n    continue;\n  }\n  // traffic allowed from lb\'s security group\n  if (\n    result.anyTrafficPeer.sg.filter((sg) => $.data.lbSgs.includes(sg))\n      .length !== 0 ||\n    result.peer.sg.filter((sg) => $.data.lbSgs.includes(sg))\n  ) {\n    continue;\n  }\n\n  if (result.peer.no && result.anyTrafficPeer.no) {\n    $.err += `No IP is allowed to access target \\`${t.Target.Id}\\` at port ${t.HealthCheckPort}, please fix your security group inbound rules. `;\n    $.err += `Security group ids: ${result.securityGroupIds.join(", ")}`;\n    return;\n  }\n\n  // gather cidr info\n  if (result.anyTrafficPeer.cidr.length !== 0) {\n    sgInfo.push({\n      cidr: result.anyTrafficPeer.cidr,\n      target: t.Target.Id,\n      sg: res.securityGroupIds,\n      type: "any-traffic",\n    });\n  }\n  if (result.peer.cidr.length !== 0) {\n    sgInfo.push({\n      cidr: result.peer.cidr,\n      target: t.Target.Id,\n      sg: res.securityGroupIds,\n      type: "specific-port",\n    });\n  }\n}\n\nif (sgInfo.length !== 0) {\n  $.info = `/md\\n`;\n  for (let i = 0; i < sgInfo.length; ++i) {\n    if (sgInfo[i].type == "any-traffic") {\n      $.info += `- Instance \\`${\n        sgInfo[i].target\n      }\\` with security groups \\`${sgInfo[i].sg.join(\n        ", "\n      )}\\` allows any traffic from \\`${sgInfo[i].cidr.join(", ")}\\`\\n`;\n    } else {\n      $.info += `- Instance \\`${\n        sgInfo[i].target\n      }\\` with security groups \\`${sgInfo[i].sg.join(\n        ", "\n      )}\\` allows health check traffic from \\`${sgInfo[i].cidr.join(", ")}\\`\\n`;\n    }\n  }\n} else {\n  $.ok = `Targets\' security groups are correct.`;\n}\n'},{name:"Check load balancer security groups' outbound rules.",js:'// check `all traffic` rules\nlet result = await $.data.utils.sg.checkPort({\n  ec2: $.aws.ec2,\n  jp: $.jp,\n  direction: "out",\n  securityGroupIds: $.data.lbSgs,\n  protocol: "tcp",\n  port: 22, // a random port\n});\n\nif (result.anyTrafficPeer.any) {\n  $.ok = "All traffic to 0.0.0.0/0 are allowed.";\n  return;\n} else if (result.anyTrafficPeer.cidr.length !== 0) {\n  $.info += `All traffic to those CIDRs are allowed: ${result.anyTrafficPeer.cidr.join(\n    ", "\n  )}. `;\n}\n\n// check targets health check ports\nlet hcPorts = $.data.unhealthyTargets.map((t) => t.HealthCheckPort);\nlet ports = [...new Set(hcPorts)]; // deduplicate\n\nfor (let i = 0; i < ports.length; ++i) {\n  let port = ports[i];\n\n  let result = await $.data.utils.sg.checkPort({\n    ec2: $.aws.ec2,\n    jp: $.jp,\n    direction: "out",\n    securityGroupIds: $.data.lbSgs,\n    protocol: "tcp",\n    port,\n  });\n\n  if (result.err) {\n    $.err = result.err;\n    return;\n  }\n\n  if (result.peer.no) {\n    $.err += `No IP is allowed outbound from the load balancer using tcp at port ${port}, please fix your security group outbound rules. `;\n    $.err += `Security group ids: ${$.data.lbSgs.join(", ")}. `;\n    return;\n  }\n\n  if (result.peer.cidr.length !== 0) {\n    $.info += `Traffic to port ${port} are allowed to those CIDRs: ${result.portPeer.cidr.join(\n      ", "\n    )}. `;\n  }\n}\n\n$.ok = `Load balancer\'s security groups are correct.`;\n'}]}},Lambda:{entry:{title:"Entry function not found.",description:"",data:{funcName:"",location:"",handler:"",zipFile:null,content:null},input:[{label:"Function Name",placeholder:'"my-function" / "my-function:v1" / ARN',store:"funcName",type:"text"},{label:"ZIP File (Optional)",placeholder:"",store:"zipFile",type:"file"}],steps:[{name:"Get function info.",js:'let res = await $.aws.lambda.getFunction({ FunctionName: $.data.funcName });\nlet repoType = $.jp.query(res, `$..RepositoryType`)[0];\nlet packageType = $.jp.query(res, `$..PackageType`)[0];\n\nif (repoType !== "S3") $.panic(`Respository type not supported: ${repoType}`);\n\nif (packageType !== "Zip")\n  $.panic(`Package type not supported: ${packageType}`);\n\n$.data.location = $.jp.query(res, `$..Location`)[0];\n$.data.handler = $.jp.query(res, `$..Handler`)[0];\n\n$.done(`/md\n- Name: \\`${$.jp.query(res, `$..FunctionName`)[0]}\\`\n- ARN: \\`${$.jp.query(res, `$..FunctionArn`)[0]}\\`\n- Handler: \\`${$.data.handler}\\`\n- RevisionId: \\`${$.jp.query(res, `$..RevisionId`)[0]}\\`\n\nYou can download the ZIP file from [here](${$.data.location}) in 10 minutes.\n`);\n'},{name:"Get ZIP file content.",js:'if (!$.data.zipFile) {\n  // try to download zip file\n  try {\n    let res = await $.axios.get($.data.location, {\n      responseType: "arraybuffer",\n    });\n    $.data.content = new Uint8Array(res.data);\n  } catch {\n    if (window) {\n      // browser can\'t make CORS request\n      $.panic(\n        `/md\\nPlease download the ZIP file from [here](${$.data.location}) then input the ZIP file.`\n      );\n    } else {\n      // other issue\n      $.panic("Failed to get ZIP file. Please input ZIP file manually.");\n    }\n  }\n} else {\n  let buf = await $.data.zipFile.arrayBuffer();\n  $.data.content = new Uint8Array(buf);\n}\n\n$.done(`Got file content, length: ${$.data.content.length}.`);\n'},{name:"Read ZIP structure.",js:'// load zipjs\nif (!window.zip) {\n  try {\n    let res = await $.axios.get(\n      "https://unpkg.com/@zip.js/zip.js@2.4.2/dist/zip.min.js"\n    );\n    eval(res.data);\n  } catch {\n    $.panic(`/md\nCannot load \\`zip.js\\`. Please check your network to https://unpkg.com .\n  `);\n  }\n}\n\nlet reader = new window.zip.ZipReader(\n  new window.zip.Uint8ArrayReader($.data.content)\n);\n\nlet entries = await reader.getEntries();\nlet files = entries.map((e) => e.filename);\nlet tops = files.filter(\n  (e) =>\n    e.split("/").length == 1 || (e.split("/").length == 2 && e.endsWith("/"))\n);\n\nlet [handlerFile, handlerFunc] = $.data.handler.split(".");\n\n// check handler file\nlet fileIndex = tops.map((t) => t.split(".")[0]).indexOf(handlerFile);\nif (fileIndex == -1) {\n  $.err = `/md\nHandler file ${handlerFile} not found in the top level of the ZIP file.\nTop level file/folders:\\n\\n`;\n  tops.map((t) => ($.err += `- ${t}\\n`));\n  $.err += "\\n";\n\n  let nested = files.map((f) => f.split(".")[0]).indexOf(handlerFile);\n  if (nested != -1) {\n    $.err += `But handler file is **found** in nested folders, full path: ${files[nested]}\\n\\n`;\n    $.err += `Maybe you need to unwrap you ZIP file.\\n\\n`;\n  } else {\n    $.err += `Handler file is also not found in nested folders.\\n\\n`;\n    $.err += `Maybe you need to change your function handler settings.\\n\\n`;\n  }\n} else {\n  // check handler function\n  const text = await entries[fileIndex].getData(new window.zip.TextWriter());\n  if (text.includes(handlerFunc)) {\n    $.ok = `Found ${handlerFunc} in ${tops[fileIndex]}.`;\n  } else {\n    $.err = `Can\'t find handler function ${handlerFunc} in file ${tops[fileIndex]}.\\n\\n`;\n    $.err += `Maybe you need to change your function handler settings.\\n\\n`;\n  }\n}\n\nreader.close();\n'}]}},RDS:{"public-access":{title:"Can't access RDS instance from the Internet.",description:'Exposing databases to the Internet is <span style="color: red;">**NOT**</span> recommended.\n\nThe following ways are prefered to connect to your databases:\n\n- Login to an EC2 instance in the same VPC, and access your databases on that EC2 instance.\n- Setup an SSH tunnel(SSH port forwarding) to connect to your databases through an EC2 instance.',data:{dbIdentifier:"",securityGroupIds:[],subnets:[],vpc:"",port:3306},input:[{label:"DB Identifier",placeholder:"",store:"dbIdentifier",type:"text"}],steps:[{name:"Retrieve database instance info & public accessibility.",js:'let res = await $.aws.rds.describeDBInstances({\n  DBInstanceIdentifier: $.data.dbIdentifier,\n});\n\nlet username = $.jp.query(res, "$..MasterUsername")[0];\nlet publiclyAccessible = $.jp.query(res, "$..PubliclyAccessible")[0];\n$.data.port = $.jp.query(res, "$..Port")[0];\n$.data.securityGroupIds = $.jp.query(\n  res,\n  "$..VpcSecurityGroups[?(@.Status==\'active\')].VpcSecurityGroupId"\n);\n$.data.subnets = $.jp.query(\n  res,\n  "$..Subnets[?(@.SubnetStatus==\'Active\')].SubnetIdentifier"\n);\n$.data.vpc = $.jp.query(res, "$..VpcId")[0];\n\nif (!publiclyAccessible) {\n  $.panic(\n    `Database is not public accessible. Please modify your database to enable "Public access".`\n  );\n}\n\n$.done(`/md\n- Database username: ${username}\n- Port: ${$.data.port}\n- Active security groups: ${$.data.securityGroupIds.join(", ")}\n- Active subnets: ${$.data.subnets.join(", ")}\n- VPC: ${$.data.vpc}\n`);\n'},{name:"Check subnets' route table Internet Gateway.",js:'let window = await $.import(\n  "https://unpkg.com/awsome-doctor-utils@0.1.0/dist/bundle.js"\n);\n$.data.utils = window.awsomeUtils;\n\nlet result = {};\n\n$.data.subnets.map((subnet) => {\n  let res = await $.data.utils.vpc.checkSubnetIgw({\n    ec2: $.aws.ec2,\n    jp: $.jp,\n    subnetId: subnet,\n    vpcId: $.data.vpc,\n  });\n\n  if (res.type == "no") {\n    $.panic(`Subnet ${subnet} is not public.`);\n  }\n\n  if (res.type == "cidr") {\n    result[subnet] = res.cidr;\n  }\n});\n\nfor (let subnet in result) {\n  $.info += `For subnet ${subnet}, those CIDR blocks will be route to an Internet Gateway: ${result[\n    subnet\n  ].join(", ")}. `;\n}\n\nif ($.info === "") $.ok = `All subnets are public.`;\n'},{name:"Check security groups' inbound rules.",js:'let result = await $.data.utils.sg.checkPort({\n  ec2: $.aws.ec2,\n  jp: $.jp,\n  direction: "in",\n  securityGroupIds: $.data.securityGroupIds,\n  protocol: "tcp",\n  port: $.data.port,\n});\n\nif (result.peer.no && result.anyTrafficPeer.no) {\n  $.err += `No IP is allowed to access this database at port ${$.data.port}, please fix your security group inbound rules. `;\n  $.err += `Security group ids: ${$.data.securityGroupIds.join(", ")}`;\n  return;\n}\n\nif (result.anyTrafficPeer.any) {\n  $.done("All traffic from 0.0.0.0/0 are allowed.");\n} else if (result.anyTrafficPeer.cidr.length !== 0) {\n  $.info += `All traffic from those CIDRs are allowed: ${result.anyTrafficPeer.cidr.join(\n    ", "\n  )}. `;\n}\n\nif (result.peer.any) {\n  $.done("Traffic is allowed from 0.0.0.0/0.");\n} else if (result.peer.cidr.length !== 0) {\n  $.info += `Traffic is allowed from those CIDRs: ${result.portPeer.cidr.join(\n    ", "\n  )}. `;\n}\n\nif ($.info === "") {\n  $.err += `No IP is allowed to access this database at port ${$.data.port}, please fix your security group inbound rules. `;\n  $.err += `Security group ids: ${$.data.securityGroupIds.join(", ")}`;\n  return;\n}\n'},{name:"Check network ACL.",js:'let result = {};\n\nlet stringifyRules = (rules) => {\n  let ret = "";\n  rules.map(\n    (r) =>\n      (ret += `- ${r.allow ? "allow" : "deny"} ${r.cidr}, rule number=${\n        r.number != 32767 ? r.number : "*"\n      }\\n`)\n  );\n  return ret;\n};\n\n$.data.subnets.map((subnet) => {\n  let inbound = await $.data.utils.vpc.checkSubnetNacl({\n    ec2: $.aws.ec2,\n    jp: $.jp,\n    subnetId: subnet,\n    direction: "in",\n    protocol: "tcp",\n    port: $.data.port,\n  });\n  let outbound = await $.data.utils.vpc.checkSubnetNacl({\n    ec2: $.aws.ec2,\n    jp: $.jp,\n    subnetId: $.data.subnetId,\n    direction: "out",\n    protocol: "tcp",\n    port: $.data.port,\n  });\n\n  if (inbound.any && outbound.any) {\n    return;\n  } else {\n    result[subnet] = {};\n\n    if (!inbound.any) {\n      result[subnet].in = inbound.rule;\n    }\n\n    if (!outbound.any) {\n      result[subnet].out = outbound.rule;\n    }\n  }\n});\n\nif (Object.keys(result).length === 0) {\n  $.done("All traffic allowed.");\n} else {\n  $.info = `/md\\n`;\n  for (let subnet in result) {\n    $.info += `### Subnet ${subnet}\\n\\n`;\n    if (result[subnet].in) {\n      $.info += "Related inbound rules:\\n\\n";\n      $.info += stringifyRules(result[subnet].in);\n      $.info += "\\n\\n";\n    }\n    if (result[subnet].out) {\n      $.info += "Related outbound rules:\\n\\n";\n      $.info += stringifyRules(result[subnet].out);\n      $.info += "\\n\\n";\n    }\n  }\n}\n'}]}},VPC:{peering:{title:"Peering not working.",description:"",data:{srcVpc:null,destVpc:null,srcEc2:null,id:"",destEc2:null,fromIp:"",toIp:"",port:22,protocol:"tcp",fromEni:null,toEni:null,fromEc2:null,toEc2:null,fromRegion:"",toRegion:"",fromSg:[],toSg:[]},input:[{label:"Peering ID",type:"text",placeholder:"pcx-12345678",store:"id"},{label:"Traffic From Private IP",type:"text",placeholder:"172.31.0.1",store:"fromIp"},{label:"Traffic To Private IP",type:"text",placeholder:"10.0.0.1",store:"toIp"},{label:"Protocol",type:"text",placeholder:"tcp / udp",store:"protocol"},{label:"Port",type:"text",placeholder:"22",store:"port"}],steps:[{name:"Get VPC info.",js:'let res = await $.aws.ec2.describeVpcPeeringConnections({\n  VpcPeeringConnectionIds: [$.data.id],\n});\n\n// check peering status\nlet status = $.jp.query(res, `$..Status`)[0];\nif (status.Code !== "active") {\n  $.panic(`/md\nPeering is not in \\`active\\` state.\n\n- Current state code: \\`${status.Code}\\`.\n- Current state message: \\`${status.Message}\\`.\n`);\n}\n\n// check owner\nlet owners = $.jp.query(res, `$..OwnerId`);\nif (owners[0] !== owners[1]) {\n  $.panic(\n    `The requester VPC & accepter VPC are not in the same AWS account, which is not supported by this tool yet.`\n  );\n}\n\n$.data.srcVpc = $.jp.query(res, `$..RequesterVpcInfo`)[0];\n$.data.destVpc = $.jp.query(res, `$..AccepterVpcInfo`)[0];\n\n// prepare ec2 client\nlet credentials = $.AWS.config.credentials;\nif ($.data.srcVpc.Region) {\n  let ec2 = new $.AWS.EC2({\n    credentials,\n    region: $.data.srcVpc.Region,\n  });\n  $.data.srcEc2 = $.aws.wrap(ec2);\n}\nif ($.data.destVpc.Region) {\n  let ec2 = new $.AWS.EC2({\n    credentials,\n    region: $.data.destVpc.Region,\n  });\n  $.data.destEc2 = $.aws.wrap(ec2);\n}\n\n$.ok = `/md\nRequester VPC:\n\n- ID: ${$.data.srcVpc.VpcId}\n- CIDR: ${$.data.srcVpc.CidrBlock}\n- Region: ${$.data.srcVpc.Region || "current region"}\n\nAccepter VPC:\n\n- ID: ${$.data.destVpc.VpcId}\n- CIDR: ${$.data.destVpc.CidrBlock}\n- Region: ${$.data.destVpc.Region || "current region"}\n`;\n'},{name:"Get ENI info.",js:'$.data.ipToBinary = (ip) => {\n  let result = "";\n  ip.split(".").map((part) => {\n    let binary = parseInt(part).toString(2);\n    result += ("0".repeat(8) + binary).substr(-8);\n  });\n  return result;\n};\n\n$.data.ipInCidr = (ip, cidr) => {\n  let [startIp, prefix] = cidr.split("/");\n  let startBinary = $.data.ipToBinary(startIp);\n  let endBinary = startBinary.slice(0, prefix) + "1".repeat(32 - prefix);\n  let start = parseInt(startBinary, 2);\n  let end = parseInt(endBinary, 2);\n  let target = parseInt($.data.ipToBinary(ip), 2);\n  return start <= target && end >= target;\n};\n\nlet applyEni = async (fromEc2, fromVpc, toEc2, toVpc) => {\n  $.data.fromEc2 = fromEc2;\n  $.data.toEc2 = toEc2;\n\n  let res1 = await fromEc2.describeNetworkInterfaces({\n    Filters: [\n      { Name: "addresses.private-ip-address", Values: [$.data.fromIp] },\n    ],\n  });\n  $.data.fromEni = $.jp.query(\n    res1,\n    `$..NetworkInterfaces[?(@.VpcId==\'${fromVpc.VpcId}\')]`\n  )[0];\n  let res2 = await toEc2.describeNetworkInterfaces({\n    Filters: [{ Name: "addresses.private-ip-address", Values: [$.data.toIp] }],\n  });\n  $.data.toEni = $.jp.query(\n    res2,\n    `$..NetworkInterfaces[?(@.VpcId==\'${toVpc.VpcId}\')]`\n  )[0];\n};\n\n// check ip in cidr, when get eni info\nif ($.data.ipInCidr($.data.fromIp, $.data.srcVpc.CidrBlock)) {\n  $.data.fromRegion = $.data.srcVpc.Region;\n  $.data.toRegion = $.data.destVpc.Region;\n  // fromIp in src vpc\n  if ($.data.ipInCidr($.data.toIp, $.data.destVpc.CidrBlock)) {\n    // toIp in dest vpc\n    await applyEni(\n      $.data.srcEc2,\n      $.data.srcVpc,\n      $.data.destEc2,\n      $.data.destVpc\n    );\n  } else {\n    $.panic(\n      `Source IP ${$.data.fromIp} is in VPC ${$.data.srcVpc.VpcId} of region ${$.data.fromRegion}, but destination IP ${$.data.toIp} is not in VPC ${$.data.destVpc.VpcId} of region ${$.data.toRegion}.`\n    );\n  }\n} else if ($.data.ipInCidr($.data.fromIp, $.data.destVpc.CidrBlock)) {\n  $.data.fromRegion = $.data.destVpc.Region;\n  $.data.toRegion = $.data.srcVpc.Region;\n  // fromIp in dest vpc\n  if ($.data.ipInCidr($.data.toIp, $.data.srcVpc.CidrBlock)) {\n    // toIp in src vpc\n    await applyEni(\n      $.data.destEc2,\n      $.data.destVpc,\n      $.data.srcEc2,\n      $.data.srcVpc\n    );\n  } else {\n    $.panic(\n      `Source IP ${$.data.fromIp} is in VPC ${$.data.destVpc.VpcId} of region ${$.data.fromRegion}, but destination IP ${$.data.toIp} is not in VPC ${$.data.srcVpc.VpcId} of region ${$.data.toRegion}.`\n    );\n  }\n} else {\n  $.panic(\n    `Source IP ${$.data.fromIp} is not in VPC ${$.data.srcVpc.VpcId} or VPC ${$.data.destVpc.VpcId}.`\n  );\n}\n\n$.data.fromSg = $.data.fromEni.Groups.map((g) => g.GroupId);\n$.data.toSg = $.data.toEni.Groups.map((g) => g.GroupId);\n\nif ($.data.toSg.length === 0)\n  $.panic(\n    `No security groups associated with the target IP, which means no traffic allowed inbound.`\n  );\n\n$.ok = `/md\nTraffic from this ENI:\n\n- ID: \\`${$.data.fromEni.NetworkInterfaceId}\\`\n- VPC: \\`${$.data.fromEni.VpcId}\\`\n- Subnet: \\`${$.data.fromEni.SubnetId}\\`\n- Private IP: \\`${$.data.fromEni.PrivateIpAddress}\\`\n- Description: \\`${$.data.fromEni.Description || "None"}\\`\n- Security Groups: ${$.data.fromSg.join(", ") || "None"}\n- Status: \\`${$.data.fromEni.Status}\\`\n- Region: \\`${$.data.fromRegion}\\`\n\nTraffic to this ENI:\n\n- ID: \\`${$.data.toEni.NetworkInterfaceId}\\`\n- VPC: \\`${$.data.toEni.VpcId}\\`\n- Subnet: \\`${$.data.toEni.SubnetId}\\`\n- Private IP: \\`${$.data.toEni.PrivateIpAddress}\\`\n- Description: \\`${$.data.toEni.Description || "None"}\\`\n- Security Groups: ${$.data.toSg.join(", ") || "None"}\n- Status: \\`${$.data.toEni.Status}\\`\n- Region: \\`${$.data.toRegion}\\`\n`;\n'},{name:"Check subnet route table.",js:'let window = await $.import(\n  "https://unpkg.com/awsome-doctor-utils@0.1.0/dist/bundle.js"\n);\n$.data.utils = window.awsomeUtils;\n\n// get route table\nlet fromRt = await $.data.utils.vpc.getSubnetRouteTable({\n  ec2: $.data.fromEc2,\n  jp: $.jp,\n  subnetId: $.data.fromEni.SubnetId,\n  vpcId: $.data.fromEni.VpcId,\n});\nlet toRt = await $.data.utils.vpc.getSubnetRouteTable({\n  ec2: $.data.toEc2,\n  jp: $.jp,\n  subnetId: $.data.toEni.SubnetId,\n  vpcId: $.data.toEni.VpcId,\n});\n\n// get route table rule\nlet fromRoute = $.jp.query(\n  fromRt,\n  `$..Routes[?(@.VpcPeeringConnectionId==\'${$.data.id}\')]`\n);\nlet toRoute = $.jp.query(\n  toRt,\n  `$..Routes[?(@.VpcPeeringConnectionId==\'${$.data.id}\')]`\n);\n\n// check route rule exist\nif (fromRoute.length === 0)\n  $.panic(\n    `Missing route table rule to VPC peering ${$.data.id} for route table ${fromRt.RouteTableId} in region ${$.data.fromRegion}.`\n  );\nif (toRoute.length === 0)\n  $.panic(\n    `Missing route table rule to VPC peering ${$.data.id} for route table ${toRt.RouteTableId} in region ${$.data.toRegion}.`\n  );\n// check rule state==active\nif (fromRoute[0].State !== "active")\n  $.panic(\n    `The rule of route table ${fromRt.RouteTableId} in region ${$.data.fromRegion} for VPC peering to ${$.data.id} is not active, state: ${fromRoute[0].State}`\n  );\nif (toRoute[0].State !== "active")\n  $.panic(\n    `The rule of route table ${toRt.RouteTableId} in region ${$.data.toRegion} for VPC peering to ${$.data.id} is not active, state: ${toRoute[0].State}`\n  );\n// check ip in route target cidr\nif (!$.data.ipInCidr($.data.fromIp, toRoute[0].DestinationCidrBlock))\n  $.panic(\n    `IP ${$.data.fromIp} is not in the CIDR ${toRoute[0].DestinationCidrBlock} for route table ${toRt.RouteTableId} in region ${$.data.fromRegion}.`\n  );\nif (!$.data.ipInCidr($.data.toIp, fromRoute[0].DestinationCidrBlock))\n  $.panic(\n    `IP ${$.data.toIp} is not in the CIDR ${fromRoute[0].DestinationCidrBlock} for route table ${fromRt.RouteTableId} in region ${$.data.toRegion}`\n  );\n\n$.ok = `/md\nTraffic from this route table:\n\n- ID: \\`${fromRt.RouteTableId}\\`\n- Region: \\`${$.data.fromRegion}\\`\n- VPC: \\`${fromRt.VpcId}\\`\n- Route Destination CIDR: \\`${fromRoute[0].DestinationCidrBlock}\\`\n- Route State: \\`${fromRoute[0].State}\\`\n\nTraffic to this route table:\n\n- ID: \\`${toRt.RouteTableId}\\`\n- Region: \\`${$.data.toRegion}\\`\n- VPC: \\`${toRt.VpcId}\\`\n- Route Destination CIDR: \\`${toRoute[0].DestinationCidrBlock}\\`\n- Route State: \\`${toRoute[0].State}\\`\n`;\n'},{name:"Check security group inbound rules.",js:'let result = await $.data.utils.sg.checkPort({\n  ec2: $.data.toEc2,\n  jp: $.jp,\n  direction: "in",\n  securityGroupIds: $.data.toSg,\n  protocol: $.data.protocol,\n  port: $.data.port,\n});\n\n// ok\nif (result.anyTrafficPeer.any) {\n  $.done("All traffic allowed from 0.0.0.0/0.");\n}\nif (result.peer.any) {\n  $.done(\n    `Traffic is allowed from 0.0.0.0/0 using protocol ${$.data.protocol} at port ${$.data.port}.`\n  );\n}\n\n// check cidr\nresult.anyTrafficPeer.cidr.map((cidr) => {\n  if ($.data.ipInCidr($.data.fromIp, cidr)) {\n    $.done(\n      `All traffic allowed from ${cidr}, which contains ${$.data.fromIp} .`\n    );\n  }\n});\nresult.peer.cidr.map((cidr) => {\n  if ($.data.ipInCidr($.data.fromIp, cidr)) {\n    $.done(\n      `Traffic is allowed from ${cidr}, which contains ${$.data.fromIp} .`\n    );\n  }\n});\n\n// check sg\nresult.anyTrafficPeer.sg.map((sg) => {\n  if ($.data.fromSg.includes(sg.GroupId)) {\n    $.done(`All traffic allowed from security group ${sg.GroupId}.`);\n  }\n});\nresult.peer.sg.map((sg) => {\n  if ($.data.fromSg.includes(sg.GroupId)) {\n    $.done(`Traffic is allowed from security group ${sg.GroupId}`);\n  }\n});\n\n$.err += `No IP is allowed to access the target instance using protocol ${$.data.protocol} at port ${$.data.port}, please fix your security group inbound rules. `;\n$.err += `Security group ids: ${$.data.toSg.join(", ")}`;\n'},{name:"Check security group outbound rules.",js:'let result = await $.data.utils.sg.checkPort({\n  ec2: $.data.fromEc2,\n  jp: $.jp,\n  direction: "out",\n  securityGroupIds: $.data.fromSg,\n  protocol: $.data.protocol,\n  port: $.data.port,\n});\n\n// ok\nif (result.anyTrafficPeer.any) {\n  $.done("All traffic allowed to 0.0.0.0/0.");\n}\nif (result.peer.any) {\n  $.done(\n    `Traffic is allowed to 0.0.0.0/0 using protocol ${$.data.protocol} at port ${$.data.port}.`\n  );\n}\n\n// check cidr\nresult.anyTrafficPeer.cidr.map((cidr) => {\n  if ($.data.ipInCidr($.data.toIp, cidr)) {\n    $.done(`All traffic allowed to ${cidr}, which contains ${$.data.toIp} .`);\n  }\n});\nresult.peer.cidr.map((cidr) => {\n  if ($.data.ipInCidr($.data.toIp, cidr)) {\n    $.done(`Traffic is allowed to ${cidr}, which contains ${$.data.toIp} .`);\n  }\n});\n\n// check sg\nresult.anyTrafficPeer.sg.map((sg) => {\n  if ($.data.toSg.includes(sg.GroupId)) {\n    $.done(`All traffic allowed to security group ${sg.GroupId}.`);\n  }\n});\nresult.peer.sg.map((sg) => {\n  if ($.data.toSg.includes(sg.GroupId)) {\n    $.done(`Traffic is allowed to security group ${sg.GroupId}`);\n  }\n});\n\n$.err += `No IP is allowed outbound from the source instance using protocol ${$.data.protocol} at port ${$.data.port}, please fix your security group outbound rules. `;\n$.err += `Security group ids: ${$.data.fromSg.join(", ")}`;\n'}]}}},region:"us-east-1",tempAk:"",tempSk:"",editorFontSize:10,editorDarkMode:!0,editorShowInvisibles:!0,editorAutoFormat:!0,persistCredentials:!1,loadingCredentials:!0}},mutations:{updateConfig:function(o,e){for(var r in o)null!==e[r]&&void 0!==e[r]&&(o[r]=e[r])}}}},84:function(o,e,r){"use strict";var t={name:"EmptyLayout",layout:"empty",props:{error:{type:Object,default:null}},data:function(){return{pageNotFound:"404 Not Found",otherError:"An error occurred"}},head:function(){return{title:404===this.error.statusCode?this.pageNotFound:this.otherError}}},n=(r(332),r(63)),l=r(68),c=r.n(l),d=r(448),component=Object(n.a)(t,(function(){var o=this,e=o.$createElement,r=o._self._c||e;return r("v-app",{attrs:{dark:""}},[404===o.error.statusCode?r("h1",[o._v("\n    "+o._s(o.pageNotFound)+"\n  ")]):r("h1",[o._v("\n    "+o._s(o.otherError)+"\n  ")]),o._v(" "),r("NuxtLink",{attrs:{to:"/"}},[o._v("\n    Home page\n  ")])],1)}),[],!1,null,"35e10596",null);e.a=component.exports;c()(component,{VApp:d.a})}},[[306,13,4,14]]]);